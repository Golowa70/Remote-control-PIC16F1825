;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 11.07.2015 12:34:30
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2906      	GOTO       262
_interrupt:
;Manch_16f1825_tx.c,188 :: 		void interrupt (void){
;Manch_16f1825_tx.c,189 :: 		if(INTCON.IOCIE & INTCON.IOCIF){                            //если прерывание по изменению...
0x0004	0x3180      	MOVLP      0
0x0005	0x1D8B      	BTFSS      INTCON, 3
0x0006	0x280B      	GOTO       L__interrupt49
0x0007	0x1C0B      	BTFSS      INTCON, 0
0x0008	0x280B      	GOTO       L__interrupt49
0x0009	0x1403      	BSF        STATUS, 0
0x000A	0x280C      	GOTO       L__interrupt50
L__interrupt49:
0x000B	0x1003      	BCF        STATUS, 0
L__interrupt50:
0x000C	0x1C03      	BTFSS      STATUS, 0
0x000D	0x2815      	GOTO       L_interrupt24
;Manch_16f1825_tx.c,190 :: 		INTCON.IOCIF=0;                                          //сбросим флаги
0x000E	0x100B      	BCF        INTCON, 0
;Manch_16f1825_tx.c,191 :: 		IOCAF.IOCAF0=0;
0x000F	0x0027      	MOVLB      7
0x0010	0x1013      	BCF        IOCAF, 0
;Manch_16f1825_tx.c,192 :: 		IOCAF.IOCAF1=0;
0x0011	0x1093      	BCF        IOCAF, 1
;Manch_16f1825_tx.c,193 :: 		IOCAF.IOCAF2=0;
0x0012	0x1113      	BCF        IOCAF, 2
;Manch_16f1825_tx.c,194 :: 		IOCAF.IOCAF4=0;
0x0013	0x1213      	BCF        IOCAF, 4
;Manch_16f1825_tx.c,195 :: 		IOCAF.IOCAF5=0;
0x0014	0x1293      	BCF        IOCAF, 5
;Manch_16f1825_tx.c,198 :: 		}
L_interrupt24:
;Manch_16f1825_tx.c,201 :: 		}
L_end_interrupt:
L__interrupt48:
0x0015	0x0009      	RETFIE     %s
; end of _interrupt
_ManPause:
;Manch_16f1825_tx.c,153 :: 		void ManPause (void)
;Manch_16f1825_tx.c,155 :: 		delay_us (500000 / MAN_SPEED);
0x0016	0x3003      	MOVLW      3
0x0017	0x00FC      	MOVWF      R12
0x0018	0x3097      	MOVLW      151
0x0019	0x00FD      	MOVWF      R13
L_ManPause18:
0x001A	0x0BFD      	DECFSZ     R13, 1
0x001B	0x281A      	GOTO       L_ManPause18
0x001C	0x0BFC      	DECFSZ     R12, 1
0x001D	0x281A      	GOTO       L_ManPause18
0x001E	0x0000      	NOP
0x001F	0x0000      	NOP
;Manch_16f1825_tx.c,156 :: 		}
L_end_ManPause:
0x0020	0x0008      	RETURN
; end of _ManPause
_ManTransmitBit:
;Manch_16f1825_tx.c,138 :: 		void ManTransmitBit (unsigned char bit_t)
;Manch_16f1825_tx.c,140 :: 		if (bit_t) {
0x0021	0x0020      	MOVLB      0
0x0022	0x0841      	MOVF       FARG_ManTransmitBit_bit_t, 0
0x0023	0x1903      	BTFSC      STATUS, 2
0x0024	0x282A      	GOTO       L_ManTransmitBit16
;Manch_16f1825_tx.c,142 :: 		TRANSMIT_PORT &= ~(TRANSMIT_LINE);        ManPause ();
0x0025	0x100E      	BCF        PORTC, 0
0x0026	0x2016      	CALL       _ManPause
;Manch_16f1825_tx.c,143 :: 		TRANSMIT_PORT |= TRANSMIT_LINE;                ManPause ();                                                                                   ///
0x0027	0x140E      	BSF        PORTC, 0
0x0028	0x2016      	CALL       _ManPause
;Manch_16f1825_tx.c,144 :: 		}
0x0029	0x282E      	GOTO       L_ManTransmitBit17
L_ManTransmitBit16:
;Manch_16f1825_tx.c,147 :: 		TRANSMIT_PORT |= TRANSMIT_LINE;                ManPause ();
0x002A	0x140E      	BSF        PORTC, 0
0x002B	0x2016      	CALL       _ManPause
;Manch_16f1825_tx.c,148 :: 		TRANSMIT_PORT &= ~TRANSMIT_LINE;        ManPause ();
0x002C	0x100E      	BCF        PORTC, 0
0x002D	0x2016      	CALL       _ManPause
;Manch_16f1825_tx.c,149 :: 		}
L_ManTransmitBit17:
;Manch_16f1825_tx.c,150 :: 		}
L_end_ManTransmitBit:
0x002E	0x0008      	RETURN
; end of _ManTransmitBit
_ManCheckSumm:
;Manch_16f1825_tx.c,165 :: 		void ManCheckSumm(unsigned char data_t)
;Manch_16f1825_tx.c,166 :: 		{           unsigned char i=0;
0x002F	0x0020      	MOVLB      0
0x0030	0x01C2      	CLRF       ManCheckSumm_i_L0
;Manch_16f1825_tx.c,168 :: 		for ( i=0; i<8; i++) {
0x0031	0x01C2      	CLRF       ManCheckSumm_i_L0
L_ManCheckSumm19:
0x0032	0x3008      	MOVLW      8
0x0033	0x0242      	SUBWF      ManCheckSumm_i_L0, 0
0x0034	0x1803      	BTFSC      STATUS, 0
0x0035	0x284B      	GOTO       L_ManCheckSumm20
;Manch_16f1825_tx.c,170 :: 		unsigned char temp = data_t;
0x0036	0x0841      	MOVF       FARG_ManCheckSumm_data_t, 0
0x0037	0x00F2      	MOVWF      R2
;Manch_16f1825_tx.c,171 :: 		temp ^= CheckSummByte;
0x0038	0x0827      	MOVF       _CheckSummByte, 0
0x0039	0x0641      	XORWF      FARG_ManCheckSumm_data_t, 0
0x003A	0x00F1      	MOVWF      R1
0x003B	0x0871      	MOVF       R1, 0
0x003C	0x00F2      	MOVWF      R2
;Manch_16f1825_tx.c,173 :: 		if (temp & 0x01) {
0x003D	0x1C71      	BTFSS      R1, 0
0x003E	0x2844      	GOTO       L_ManCheckSumm22
;Manch_16f1825_tx.c,175 :: 		CheckSummByte ^= 0x18;
0x003F	0x3018      	MOVLW      24
0x0040	0x06A7      	XORWF      _CheckSummByte, 1
;Manch_16f1825_tx.c,176 :: 		temp = 0x80;
0x0041	0x3080      	MOVLW      128
0x0042	0x00F2      	MOVWF      R2
;Manch_16f1825_tx.c,177 :: 		}
0x0043	0x2845      	GOTO       L_ManCheckSumm23
L_ManCheckSumm22:
;Manch_16f1825_tx.c,179 :: 		else        temp = 0;
0x0044	0x01F2      	CLRF       R2
L_ManCheckSumm23:
;Manch_16f1825_tx.c,181 :: 		CheckSummByte >>= 1;
0x0045	0x36A7      	LSRF       _CheckSummByte, 1
;Manch_16f1825_tx.c,182 :: 		CheckSummByte |= temp;
0x0046	0x0872      	MOVF       R2, 0
0x0047	0x04A7      	IORWF       _CheckSummByte, 1
;Manch_16f1825_tx.c,183 :: 		data_t >>= 1;
0x0048	0x36C1      	LSRF       FARG_ManCheckSumm_data_t, 1
;Manch_16f1825_tx.c,168 :: 		for ( i=0; i<8; i++) {
0x0049	0x0AC2      	INCF       ManCheckSumm_i_L0, 1
;Manch_16f1825_tx.c,184 :: 		}
0x004A	0x2832      	GOTO       L_ManCheckSumm19
L_ManCheckSumm20:
;Manch_16f1825_tx.c,185 :: 		}
L_end_ManCheckSumm:
0x004B	0x0008      	RETURN
; end of _ManCheckSumm
_ManTransmitByte:
;Manch_16f1825_tx.c,124 :: 		void ManTransmitByte (unsigned char byte)
;Manch_16f1825_tx.c,125 :: 		{       unsigned char i=0;
0x004C	0x0020      	MOVLB      0
0x004D	0x01C0      	CLRF       ManTransmitByte_i_L0
;Manch_16f1825_tx.c,126 :: 		ManCheckSumm (byte);
0x004E	0x083F      	MOVF       FARG_ManTransmitByte_byte, 0
0x004F	0x00C1      	MOVWF      FARG_ManCheckSumm_data_t
0x0050	0x202F      	CALL       _ManCheckSumm
;Manch_16f1825_tx.c,128 :: 		for ( i=0; i<8; i++) {
0x0051	0x01C0      	CLRF       ManTransmitByte_i_L0
L_ManTransmitByte11:
0x0052	0x3008      	MOVLW      8
0x0053	0x0240      	SUBWF      ManTransmitByte_i_L0, 0
0x0054	0x1803      	BTFSC      STATUS, 0
0x0055	0x2861      	GOTO       L_ManTransmitByte12
;Manch_16f1825_tx.c,130 :: 		if (byte & 0x80)        ManTransmitBit (1);
0x0056	0x1FBF      	BTFSS      FARG_ManTransmitByte_byte, 7
0x0057	0x285C      	GOTO       L_ManTransmitByte14
0x0058	0x3001      	MOVLW      1
0x0059	0x00C1      	MOVWF      FARG_ManTransmitBit_bit_t
0x005A	0x2021      	CALL       _ManTransmitBit
0x005B	0x285E      	GOTO       L_ManTransmitByte15
L_ManTransmitByte14:
;Manch_16f1825_tx.c,131 :: 		else                        ManTransmitBit (0);
0x005C	0x01C1      	CLRF       FARG_ManTransmitBit_bit_t
0x005D	0x2021      	CALL       _ManTransmitBit
L_ManTransmitByte15:
;Manch_16f1825_tx.c,132 :: 		byte <<= 1;
0x005E	0x35BF      	LSLF       FARG_ManTransmitByte_byte, 1
;Manch_16f1825_tx.c,128 :: 		for ( i=0; i<8; i++) {
0x005F	0x0AC0      	INCF       ManTransmitByte_i_L0, 1
;Manch_16f1825_tx.c,133 :: 		}
0x0060	0x2852      	GOTO       L_ManTransmitByte11
L_ManTransmitByte12:
;Manch_16f1825_tx.c,134 :: 		}
L_end_ManTransmitByte:
0x0061	0x0008      	RETURN
; end of _ManTransmitByte
_Delay_500us:
;__Lib_Delays.c,27 :: 		void Delay_500us() {
;__Lib_Delays.c,28 :: 		Delay_us(498);
0x0062	0x3003      	MOVLW      3
0x0063	0x00FC      	MOVWF      R12
0x0064	0x3095      	MOVLW      149
0x0065	0x00FD      	MOVWF      R13
L_Delay_500us4:
0x0066	0x0BFD      	DECFSZ     R13, 1
0x0067	0x2866      	GOTO       L_Delay_500us4
0x0068	0x0BFC      	DECFSZ     R12, 1
0x0069	0x2866      	GOTO       L_Delay_500us4
;__Lib_Delays.c,29 :: 		}
L_end_Delay_500us:
0x006A	0x0008      	RETURN
; end of _Delay_500us
_ManBufAddByte:
;Manch_16f1825_tx.c,65 :: 		void ManBufAddByte (unsigned char place, unsigned char byte)
;Manch_16f1825_tx.c,67 :: 		if (place >= MAN_BUF_LENGTH)        return;
0x006B	0x3010      	MOVLW      16
0x006C	0x0020      	MOVLB      0
0x006D	0x0238      	SUBWF      FARG_ManBufAddByte_place, 0
0x006E	0x1C03      	BTFSS      STATUS, 0
0x006F	0x2871      	GOTO       L_ManBufAddByte0
0x0070	0x287B      	GOTO       L_end_ManBufAddByte
L_ManBufAddByte0:
;Manch_16f1825_tx.c,68 :: 		ManTransmitDataBuf [place] = byte;
0x0071	0x3028      	MOVLW      _ManTransmitDataBuf
0x0072	0x0086      	MOVWF      FSR1
0x0073	0x3000      	MOVLW      hi_addr(_ManTransmitDataBuf)
0x0074	0x0087      	MOVWF      FSR1H
0x0075	0x0838      	MOVF       FARG_ManBufAddByte_place, 0
0x0076	0x0786      	ADDWF      FSR1, 1
0x0077	0x1803      	BTFSC      STATUS, 0
0x0078	0x0A87      	INCF       FSR1H, 1
0x0079	0x0839      	MOVF       FARG_ManBufAddByte_byte, 0
0x007A	0x0081      	MOVWF      INDF1
;Manch_16f1825_tx.c,69 :: 		}
L_end_ManBufAddByte:
0x007B	0x0008      	RETURN
; end of _ManBufAddByte
_Button:
;__Lib_Button.c,6 :: 		
;__Lib_Button.c,8 :: 		
0x007C	0x0020      	MOVLB      0
0x007D	0x01BE      	CLRF       Button_rslt_L0
;__Lib_Button.c,11 :: 		
0x007E	0x083A      	MOVF       FARG_Button_pin, 0
0x007F	0x00F1      	MOVWF      R1
0x0080	0x3001      	MOVLW      1
0x0081	0x00F0      	MOVWF      R0
0x0082	0x0871      	MOVF       R1, 0
L__Button5:
0x0083	0x1903      	BTFSC      STATUS, 2
0x0084	0x2888      	GOTO       L__Button6
0x0085	0x35F0      	LSLF       R0, 1
0x0086	0x3EFF      	ADDLW      255
0x0087	0x2883      	GOTO       L__Button5
L__Button6:
0x0088	0x0870      	MOVF       R0, 0
0x0089	0x00BD      	MOVWF      Button_pMask_L0
;__Lib_Button.c,13 :: 		
0x008A	0x0838      	MOVF       FARG_Button_port, 0
0x008B	0x0084      	MOVWF      FSR0
0x008C	0x0839      	MOVF       FARG_Button_port+1, 0
0x008D	0x0085      	MOVWF      FSR0H
0x008E	0x0870      	MOVF       R0, 0
0x008F	0x0500      	ANDWF      INDF0, 0
0x0090	0x00F1      	MOVWF      R1
0x0091	0x0871      	MOVF       R1, 0
0x0092	0x3001      	MOVLW      1
0x0093	0x1D03      	BTFSS      STATUS, 2
0x0094	0x3000      	MOVLW      0
0x0095	0x00F0      	MOVWF      R0
0x0096	0x083C      	MOVF       FARG_Button_active_state, 0
0x0097	0x06F0      	XORWF      R0, 1
0x0098	0x1903      	BTFSC      STATUS, 2
0x0099	0x28B4      	GOTO       L_Button0
;__Lib_Button.c,15 :: 		
L_Button1:
0x009A	0x083B      	MOVF       FARG_Button_time_ms, 0
0x009B	0x3C00      	SUBLW      0
0x009C	0x1803      	BTFSC      STATUS, 0
0x009D	0x28A2      	GOTO       L_Button2
;__Lib_Button.c,16 :: 		
0x009E	0x2062      	CALL       _Delay_500us
;__Lib_Button.c,17 :: 		
0x009F	0x2062      	CALL       _Delay_500us
;__Lib_Button.c,18 :: 		
0x00A0	0x03BB      	DECF       FARG_Button_time_ms, 1
;__Lib_Button.c,19 :: 		
0x00A1	0x289A      	GOTO       L_Button1
L_Button2:
;__Lib_Button.c,21 :: 		
0x00A2	0x0838      	MOVF       FARG_Button_port, 0
0x00A3	0x0084      	MOVWF      FSR0
0x00A4	0x0839      	MOVF       FARG_Button_port+1, 0
0x00A5	0x0085      	MOVWF      FSR0H
0x00A6	0x083D      	MOVF       Button_pMask_L0, 0
0x00A7	0x0500      	ANDWF      INDF0, 0
0x00A8	0x00F1      	MOVWF      R1
0x00A9	0x0871      	MOVF       R1, 0
0x00AA	0x3001      	MOVLW      1
0x00AB	0x1D03      	BTFSS      STATUS, 2
0x00AC	0x3000      	MOVLW      0
0x00AD	0x00F0      	MOVWF      R0
0x00AE	0x083C      	MOVF       FARG_Button_active_state, 0
0x00AF	0x06F0      	XORWF      R0, 1
0x00B0	0x1903      	BTFSC      STATUS, 2
0x00B1	0x28B4      	GOTO       L_Button3
;__Lib_Button.c,22 :: 		
0x00B2	0x30FF      	MOVLW      255
0x00B3	0x00BE      	MOVWF      Button_rslt_L0
L_Button3:
;__Lib_Button.c,23 :: 		
L_Button0:
;__Lib_Button.c,25 :: 		
0x00B4	0x083E      	MOVF       Button_rslt_L0, 0
0x00B5	0x00F0      	MOVWF      R0
;__Lib_Button.c,26 :: 		
L_end_Button:
0x00B6	0x0008      	RETURN
; end of _Button
___CC2DW:
;__Lib_System.c,71 :: 		
;__Lib_System.c,73 :: 		
_CC2DL_Loop1:
;__Lib_System.c,74 :: 		
0x00B7	0x0012      	MOVIW      FSR0++ 
;__Lib_System.c,75 :: 		
0x00B8	0x001E      	MOVWI      FSR1++ 
;__Lib_System.c,76 :: 		
0x00B9	0x03F0      	DECF       R0, 1
;__Lib_System.c,77 :: 		
0x00BA	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,78 :: 		
0x00BB	0x28B7      	GOTO       _CC2DL_Loop1
;__Lib_System.c,79 :: 		
0x00BC	0x03F1      	DECF       R1, 1
;__Lib_System.c,80 :: 		
0x00BD	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,81 :: 		
0x00BE	0x28B7      	GOTO       _CC2DL_Loop1
;__Lib_System.c,83 :: 		
L_end___CC2DW:
0x00BF	0x0008      	RETURN
; end of ___CC2DW
_ManTransmitData:
;Manch_16f1825_tx.c,74 :: 		void ManTransmitData (unsigned char BufLen){
;Manch_16f1825_tx.c,75 :: 		unsigned char  i=0;
0x00C0	0x0020      	MOVLB      0
0x00C1	0x01B9      	CLRF       ManTransmitData_i_L0
0x00C2	0x01BA      	CLRF       ManTransmitData_u_L0
0x00C3	0x01BB      	CLRF       ManTransmitData_a_L0
0x00C4	0x01BC      	CLRF       ManTransmitData_byte_L0
;Manch_16f1825_tx.c,81 :: 		INTCON.GIE =0;                                         //запрет всех прерываний
0x00C5	0x138B      	BCF        INTCON, 7
;Manch_16f1825_tx.c,83 :: 		for ( i=0; i< MAN_PILOT_LEN; i++) {                     //передача пилотного сигнала
0x00C6	0x01B9      	CLRF       ManTransmitData_i_L0
L_ManTransmitData1:
0x00C7	0x3008      	MOVLW      8
0x00C8	0x0239      	SUBWF      ManTransmitData_i_L0, 0
0x00C9	0x1803      	BTFSC      STATUS, 0
0x00CA	0x28D0      	GOTO       L_ManTransmitData2
;Manch_16f1825_tx.c,84 :: 		ManTransmitBit (1);
0x00CB	0x3001      	MOVLW      1
0x00CC	0x00C1      	MOVWF      FARG_ManTransmitBit_bit_t
0x00CD	0x2021      	CALL       _ManTransmitBit
;Manch_16f1825_tx.c,83 :: 		for ( i=0; i< MAN_PILOT_LEN; i++) {                     //передача пилотного сигнала
0x00CE	0x0AB9      	INCF       ManTransmitData_i_L0, 1
;Manch_16f1825_tx.c,85 :: 		}
0x00CF	0x28C7      	GOTO       L_ManTransmitData1
L_ManTransmitData2:
;Manch_16f1825_tx.c,90 :: 		while (1)   {
L_ManTransmitData4:
;Manch_16f1825_tx.c,92 :: 		byte = ManIdentifier [a];
0x00D0	0x3020      	MOVLW      _ManIdentifier
0x00D1	0x0084      	MOVWF      FSR0
0x00D2	0x3000      	MOVLW      hi_addr(_ManIdentifier)
0x00D3	0x0085      	MOVWF      FSR0H
0x00D4	0x083B      	MOVF       ManTransmitData_a_L0, 0
0x00D5	0x0784      	ADDWF      FSR0, 1
0x00D6	0x1803      	BTFSC      STATUS, 0
0x00D7	0x0A85      	INCF       FSR0H, 1
0x00D8	0x0800      	MOVF       INDF0, 0
0x00D9	0x00F0      	MOVWF      R0
0x00DA	0x0870      	MOVF       R0, 0
0x00DB	0x00BC      	MOVWF      ManTransmitData_byte_L0
;Manch_16f1825_tx.c,93 :: 		a++;
0x00DC	0x0ABB      	INCF       ManTransmitData_a_L0, 1
;Manch_16f1825_tx.c,94 :: 		if (byte)ManTransmitByte (byte);
0x00DD	0x0870      	MOVF       R0, 0
0x00DE	0x1903      	BTFSC      STATUS, 2
0x00DF	0x28E4      	GOTO       L_ManTransmitData6
0x00E0	0x083C      	MOVF       ManTransmitData_byte_L0, 0
0x00E1	0x00BF      	MOVWF      FARG_ManTransmitByte_byte
0x00E2	0x204C      	CALL       _ManTransmitByte
0x00E3	0x28E5      	GOTO       L_ManTransmitData7
L_ManTransmitData6:
;Manch_16f1825_tx.c,96 :: 		break;
0x00E4	0x28E6      	GOTO       L_ManTransmitData5
L_ManTransmitData7:
;Manch_16f1825_tx.c,97 :: 		}
0x00E5	0x28D0      	GOTO       L_ManTransmitData4
L_ManTransmitData5:
;Manch_16f1825_tx.c,101 :: 		CheckSummByte = 0;                                   //обнулить контрольку
0x00E6	0x01A7      	CLRF       _CheckSummByte
;Manch_16f1825_tx.c,102 :: 		ManTransmitByte (BufLen);
0x00E7	0x0838      	MOVF       FARG_ManTransmitData_BufLen, 0
0x00E8	0x00BF      	MOVWF      FARG_ManTransmitByte_byte
0x00E9	0x204C      	CALL       _ManTransmitByte
;Manch_16f1825_tx.c,105 :: 		for (  u=0; u<(BufLen); u++) {
0x00EA	0x01BA      	CLRF       ManTransmitData_u_L0
L_ManTransmitData8:
0x00EB	0x0838      	MOVF       FARG_ManTransmitData_BufLen, 0
0x00EC	0x023A      	SUBWF      ManTransmitData_u_L0, 0
0x00ED	0x1803      	BTFSC      STATUS, 0
0x00EE	0x28FC      	GOTO       L_ManTransmitData9
;Manch_16f1825_tx.c,107 :: 		ManTransmitByte (ManTransmitDataBuf [u]);
0x00EF	0x3028      	MOVLW      _ManTransmitDataBuf
0x00F0	0x0084      	MOVWF      FSR0
0x00F1	0x3000      	MOVLW      hi_addr(_ManTransmitDataBuf)
0x00F2	0x0085      	MOVWF      FSR0H
0x00F3	0x083A      	MOVF       ManTransmitData_u_L0, 0
0x00F4	0x0784      	ADDWF      FSR0, 1
0x00F5	0x1803      	BTFSC      STATUS, 0
0x00F6	0x0A85      	INCF       FSR0H, 1
0x00F7	0x0800      	MOVF       INDF0, 0
0x00F8	0x00BF      	MOVWF      FARG_ManTransmitByte_byte
0x00F9	0x204C      	CALL       _ManTransmitByte
;Manch_16f1825_tx.c,105 :: 		for (  u=0; u<(BufLen); u++) {
0x00FA	0x0ABA      	INCF       ManTransmitData_u_L0, 1
;Manch_16f1825_tx.c,108 :: 		}
0x00FB	0x28EB      	GOTO       L_ManTransmitData8
L_ManTransmitData9:
;Manch_16f1825_tx.c,112 :: 		ManTransmitByte (CheckSummByte);
0x00FC	0x0827      	MOVF       _CheckSummByte, 0
0x00FD	0x00BF      	MOVWF      FARG_ManTransmitByte_byte
0x00FE	0x204C      	CALL       _ManTransmitByte
;Manch_16f1825_tx.c,114 :: 		ManTransmitBit (0);
0x00FF	0x01C1      	CLRF       FARG_ManTransmitBit_bit_t
0x0100	0x2021      	CALL       _ManTransmitBit
;Manch_16f1825_tx.c,117 :: 		INTCON.GIE =1;                                       //разрешение прерываний
0x0101	0x178B      	BSF        INTCON, 7
;Manch_16f1825_tx.c,119 :: 		}
L_end_ManTransmitData:
0x0102	0x0008      	RETURN
; end of _ManTransmitData
_ManInit:
;Manch_16f1825_tx.c,57 :: 		void ManInit (void)
;Manch_16f1825_tx.c,59 :: 		TRANSMIT_TRIS &= ~TRANSMIT_LINE;                        //линия на вывод
0x0103	0x0021      	MOVLB      1
0x0104	0x100E      	BCF        TRISC, 0
;Manch_16f1825_tx.c,60 :: 		}
L_end_ManInit:
0x0105	0x0008      	RETURN
; end of _ManInit
_main:
0x0106	0x3073      	MOVLW      115
0x0107	0x0020      	MOVLB      0
0x0108	0x00A0      	MOVWF      _ManIdentifier
0x0109	0x3068      	MOVLW      104
0x010A	0x00A1      	MOVWF      33
0x010B	0x01A2      	CLRF       34
0x010C	0x01A3      	CLRF       _flagTrigger
0x010D	0x3080      	MOVLW      128
0x010E	0x00A4      	MOVWF      _speedLevel
0x010F	0x01A5      	CLRF       _dataButtons
0x0110	0x01A6      	CLRF       _flagOldstate
;Manch_16f1825_tx.c,205 :: 		void main (void) {
;Manch_16f1825_tx.c,206 :: 		OSCCON=0b11111111;                                       //тактовая частота
0x0111	0x30FF      	MOVLW      255
0x0112	0x0021      	MOVLB      1
0x0113	0x0099      	MOVWF      OSCCON
;Manch_16f1825_tx.c,207 :: 		TRISA=0b111111;
0x0114	0x303F      	MOVLW      63
0x0115	0x008C      	MOVWF      TRISA
;Manch_16f1825_tx.c,208 :: 		ANSELA=0;                                                //отключение АЦП
0x0116	0x0023      	MOVLB      3
0x0117	0x018C      	CLRF       ANSELA
;Manch_16f1825_tx.c,209 :: 		PORTA=0b000000;
0x0118	0x0020      	MOVLB      0
0x0119	0x018C      	CLRF       PORTA
;Manch_16f1825_tx.c,210 :: 		WPUA=0b111111;                                           //подтягивающие резист.
0x011A	0x303F      	MOVLW      63
0x011B	0x0024      	MOVLB      4
0x011C	0x008C      	MOVWF      WPUA
;Manch_16f1825_tx.c,211 :: 		TRISC=0b000000;
0x011D	0x0021      	MOVLB      1
0x011E	0x018E      	CLRF       TRISC
;Manch_16f1825_tx.c,212 :: 		PORTC=0b000000;
0x011F	0x0020      	MOVLB      0
0x0120	0x018E      	CLRF       PORTC
;Manch_16f1825_tx.c,213 :: 		OPTION_REG=0b00000000;
0x0121	0x0021      	MOVLB      1
0x0122	0x0195      	CLRF       OPTION_REG
;Manch_16f1825_tx.c,214 :: 		INTCON=0b00001000;                                       //настройки прерываний
0x0123	0x3008      	MOVLW      8
0x0124	0x008B      	MOVWF      INTCON
;Manch_16f1825_tx.c,215 :: 		WDTCON=0b00010000;                                       //делитель собаки ???
0x0125	0x3010      	MOVLW      16
0x0126	0x0097      	MOVWF      WDTCON
;Manch_16f1825_tx.c,216 :: 		IOCAN=0b00110111;                                        //прерывание по изменению порта
0x0127	0x3037      	MOVLW      55
0x0128	0x0027      	MOVLB      7
0x0129	0x0092      	MOVWF      IOCAN
;Manch_16f1825_tx.c,218 :: 		ManInit ();                                              //инициализация  передачи манчестер сигнала
0x012A	0x2103      	CALL       _ManInit
;Manch_16f1825_tx.c,220 :: 		while(1){
L_main25:
;Manch_16f1825_tx.c,222 :: 		asm{clrwdt};                                       //сброс собаки
0x012B	0x0064      	CLRWDT
;Manch_16f1825_tx.c,223 :: 		PWR_TRANSEIVER=1;                                  // включаем питание передатчика
0x012C	0x0022      	MOVLB      2
0x012D	0x148E      	BSF        LATC, 1
;Manch_16f1825_tx.c,224 :: 		if( Button(FORWARD))  dataButtons |=(1<<0);        //опрос кнопок
0x012E	0x300C      	MOVLW      PORTA
0x012F	0x0020      	MOVLB      0
0x0130	0x00B8      	MOVWF      FARG_Button_port
0x0131	0x3000      	MOVLW      hi_addr(PORTA)
0x0132	0x00B9      	MOVWF      FARG_Button_port+1
0x0133	0x01BA      	CLRF       FARG_Button_pin
0x0134	0x3014      	MOVLW      20
0x0135	0x00BB      	MOVWF      FARG_Button_time_ms
0x0136	0x01BC      	CLRF       FARG_Button_active_state
0x0137	0x207C      	CALL       _Button
0x0138	0x0870      	MOVF       R0, 0
0x0139	0x1903      	BTFSC      STATUS, 2
0x013A	0x293C      	GOTO       L_main27
0x013B	0x1425      	BSF        _dataButtons, 0
L_main27:
;Manch_16f1825_tx.c,225 :: 		if( Button(REVERSE))  dataButtons |=(1<<1);
0x013C	0x300C      	MOVLW      PORTA
0x013D	0x00B8      	MOVWF      FARG_Button_port
0x013E	0x3000      	MOVLW      hi_addr(PORTA)
0x013F	0x00B9      	MOVWF      FARG_Button_port+1
0x0140	0x3001      	MOVLW      1
0x0141	0x00BA      	MOVWF      FARG_Button_pin
0x0142	0x3014      	MOVLW      20
0x0143	0x00BB      	MOVWF      FARG_Button_time_ms
0x0144	0x01BC      	CLRF       FARG_Button_active_state
0x0145	0x207C      	CALL       _Button
0x0146	0x0870      	MOVF       R0, 0
0x0147	0x1903      	BTFSC      STATUS, 2
0x0148	0x294A      	GOTO       L_main28
0x0149	0x14A5      	BSF        _dataButtons, 1
L_main28:
;Manch_16f1825_tx.c,226 :: 		if( Button(LEFT ))    dataButtons |=(1<<2);
0x014A	0x300C      	MOVLW      PORTA
0x014B	0x00B8      	MOVWF      FARG_Button_port
0x014C	0x3000      	MOVLW      hi_addr(PORTA)
0x014D	0x00B9      	MOVWF      FARG_Button_port+1
0x014E	0x3002      	MOVLW      2
0x014F	0x00BA      	MOVWF      FARG_Button_pin
0x0150	0x3014      	MOVLW      20
0x0151	0x00BB      	MOVWF      FARG_Button_time_ms
0x0152	0x01BC      	CLRF       FARG_Button_active_state
0x0153	0x207C      	CALL       _Button
0x0154	0x0870      	MOVF       R0, 0
0x0155	0x1903      	BTFSC      STATUS, 2
0x0156	0x2958      	GOTO       L_main29
0x0157	0x1525      	BSF        _dataButtons, 2
L_main29:
;Manch_16f1825_tx.c,227 :: 		if( Button(RIGHT))    dataButtons |=(1<<3);
0x0158	0x300C      	MOVLW      PORTA
0x0159	0x00B8      	MOVWF      FARG_Button_port
0x015A	0x3000      	MOVLW      hi_addr(PORTA)
0x015B	0x00B9      	MOVWF      FARG_Button_port+1
0x015C	0x3004      	MOVLW      4
0x015D	0x00BA      	MOVWF      FARG_Button_pin
0x015E	0x3014      	MOVLW      20
0x015F	0x00BB      	MOVWF      FARG_Button_time_ms
0x0160	0x01BC      	CLRF       FARG_Button_active_state
0x0161	0x207C      	CALL       _Button
0x0162	0x0870      	MOVF       R0, 0
0x0163	0x1903      	BTFSC      STATUS, 2
0x0164	0x2966      	GOTO       L_main30
0x0165	0x15A5      	BSF        _dataButtons, 3
L_main30:
;Manch_16f1825_tx.c,229 :: 		if( Button(TRIGGER_PASS))  {
0x0166	0x300C      	MOVLW      PORTA
0x0167	0x00B8      	MOVWF      FARG_Button_port
0x0168	0x3000      	MOVLW      hi_addr(PORTA)
0x0169	0x00B9      	MOVWF      FARG_Button_port+1
0x016A	0x3005      	MOVLW      5
0x016B	0x00BA      	MOVWF      FARG_Button_pin
0x016C	0x3014      	MOVLW      20
0x016D	0x00BB      	MOVWF      FARG_Button_time_ms
0x016E	0x3001      	MOVLW      1
0x016F	0x00BC      	MOVWF      FARG_Button_active_state
0x0170	0x207C      	CALL       _Button
0x0171	0x0870      	MOVF       R0, 0
0x0172	0x1903      	BTFSC      STATUS, 2
0x0173	0x2976      	GOTO       L_main31
;Manch_16f1825_tx.c,230 :: 		flagOldstate=1;
0x0174	0x3001      	MOVLW      1
0x0175	0x00A6      	MOVWF      _flagOldstate
;Manch_16f1825_tx.c,231 :: 		}
L_main31:
;Manch_16f1825_tx.c,233 :: 		if( Button (TRIGGER_ACT) && flagOldstate ) {        //управление светом фар
0x0176	0x300C      	MOVLW      PORTA
0x0177	0x00B8      	MOVWF      FARG_Button_port
0x0178	0x3000      	MOVLW      hi_addr(PORTA)
0x0179	0x00B9      	MOVWF      FARG_Button_port+1
0x017A	0x3005      	MOVLW      5
0x017B	0x00BA      	MOVWF      FARG_Button_pin
0x017C	0x3014      	MOVLW      20
0x017D	0x00BB      	MOVWF      FARG_Button_time_ms
0x017E	0x01BC      	CLRF       FARG_Button_active_state
0x017F	0x207C      	CALL       _Button
0x0180	0x0870      	MOVF       R0, 0
0x0181	0x1903      	BTFSC      STATUS, 2
0x0182	0x2993      	GOTO       L_main34
0x0183	0x0826      	MOVF       _flagOldstate, 0
0x0184	0x1903      	BTFSC      STATUS, 2
0x0185	0x2993      	GOTO       L_main34
L__main39:
;Manch_16f1825_tx.c,234 :: 		flagOldstate=0;
0x0186	0x01A6      	CLRF       _flagOldstate
;Manch_16f1825_tx.c,235 :: 		flagTrigger = ~flagTrigger;
0x0187	0x0923      	COMF       _flagTrigger, 0
0x0188	0x00F0      	MOVWF      R0
0x0189	0x0870      	MOVF       R0, 0
0x018A	0x00A3      	MOVWF      _flagTrigger
;Manch_16f1825_tx.c,236 :: 		if(flagTrigger){
0x018B	0x0870      	MOVF       R0, 0
0x018C	0x1903      	BTFSC      STATUS, 2
0x018D	0x2991      	GOTO       L_main35
;Manch_16f1825_tx.c,237 :: 		dataButtons |=(1<<4);                      //для триггера(свет фар)используем два бита,один(4)вкл.
0x018E	0x1625      	BSF        _dataButtons, 4
;Manch_16f1825_tx.c,238 :: 		dataButtons &=~(1<<5);                     //второй(5) выкл.
0x018F	0x12A5      	BCF        _dataButtons, 5
;Manch_16f1825_tx.c,239 :: 		}
0x0190	0x2993      	GOTO       L_main36
L_main35:
;Manch_16f1825_tx.c,241 :: 		dataButtons &=~(1<<4);                   //очистить бит включения света
0x0191	0x1225      	BCF        _dataButtons, 4
;Manch_16f1825_tx.c,242 :: 		dataButtons |=(1<<5);                    //команда выключить свет
0x0192	0x16A5      	BSF        _dataButtons, 5
;Manch_16f1825_tx.c,243 :: 		}
L_main36:
;Manch_16f1825_tx.c,244 :: 		}
L_main34:
;Manch_16f1825_tx.c,247 :: 		if(dataButtons){                                    // если кнопка нажата...
0x0193	0x0825      	MOVF       _dataButtons, 0
0x0194	0x1903      	BTFSC      STATUS, 2
0x0195	0x29A4      	GOTO       L_main37
;Manch_16f1825_tx.c,249 :: 		ManBufAddByte(0,dataButtons );                //поместить в 0 ячейку буфера байт данных кнопок
0x0196	0x01B8      	CLRF       FARG_ManBufAddByte_place
0x0197	0x0825      	MOVF       _dataButtons, 0
0x0198	0x00B9      	MOVWF      FARG_ManBufAddByte_byte
0x0199	0x206B      	CALL       _ManBufAddByte
;Manch_16f1825_tx.c,250 :: 		ManBufAddByte(1,speedLevel);                  //поместить в 1 ячейку буфера байт данных скорости
0x019A	0x3001      	MOVLW      1
0x019B	0x00B8      	MOVWF      FARG_ManBufAddByte_place
0x019C	0x0824      	MOVF       _speedLevel, 0
0x019D	0x00B9      	MOVWF      FARG_ManBufAddByte_byte
0x019E	0x206B      	CALL       _ManBufAddByte
;Manch_16f1825_tx.c,252 :: 		ManTransmitData (2);                         //передать два байта данных из буфера
0x019F	0x3002      	MOVLW      2
0x01A0	0x00B8      	MOVWF      FARG_ManTransmitData_BufLen
0x01A1	0x20C0      	CALL       _ManTransmitData
;Manch_16f1825_tx.c,253 :: 		dataButtons=0;                               //обнулить переменную опроса кнопок
0x01A2	0x01A5      	CLRF       _dataButtons
;Manch_16f1825_tx.c,255 :: 		}
0x01A3	0x29A9      	GOTO       L_main38
L_main37:
;Manch_16f1825_tx.c,257 :: 		flagOldstate=1;                           //выставим флаг триггера
0x01A4	0x3001      	MOVLW      1
0x01A5	0x00A6      	MOVWF      _flagOldstate
;Manch_16f1825_tx.c,258 :: 		PWR_TRANSEIVER=0;                         //выключаем питание передатчика
0x01A6	0x0022      	MOVLB      2
0x01A7	0x108E      	BCF        LATC, 1
;Manch_16f1825_tx.c,259 :: 		asm{sleep};                               //идем спать
0x01A8	0x0063      	SLEEP
;Manch_16f1825_tx.c,261 :: 		}
L_main38:
;Manch_16f1825_tx.c,262 :: 		}
0x01A9	0x292B      	GOTO       L_main25
;Manch_16f1825_tx.c,265 :: 		}
L_end_main:
0x01AA	0x29AA      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [18]    _interrupt
0x0016      [11]    _ManPause
0x0021      [14]    _ManTransmitBit
0x002F      [29]    _ManCheckSumm
0x004C      [22]    _ManTransmitByte
0x0062       [9]    _Delay_500us
0x006B      [17]    _ManBufAddByte
0x007C      [59]    _Button
0x00B7       [9]    ___CC2DW
0x00C0      [67]    _ManTransmitData
0x0103       [3]    _ManInit
0x0106     [165]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF0
0x0001       [1]    INDF1
0x0003       [1]    STATUS
0x0004       [1]    FSR0L
0x0005       [1]    FSR0H
0x0006       [1]    FSR1L
0x0007       [1]    FSR1H
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PORTA
0x000E       [1]    PORTC
0x0020       [3]    _ManIdentifier
0x0023       [1]    _flagTrigger
0x0024       [1]    _speedLevel
0x0025       [1]    _dataButtons
0x0026       [1]    _flagOldstate
0x0027       [1]    _CheckSummByte
0x0028      [16]    _ManTransmitDataBuf
0x0038       [2]    FARG_Button_port
0x0038       [1]    FARG_ManTransmitData_BufLen
0x0038       [1]    FARG_ManBufAddByte_place
0x0039       [1]    FARG_ManBufAddByte_byte
0x0039       [1]    ManTransmitData_i_L0
0x003A       [1]    ManTransmitData_u_L0
0x003A       [1]    FARG_Button_pin
0x003B       [1]    FARG_Button_time_ms
0x003B       [1]    ManTransmitData_a_L0
0x003C       [1]    FARG_Button_active_state
0x003C       [1]    ManTransmitData_byte_L0
0x003D       [1]    Button_pMask_L0
0x003E       [1]    Button_rslt_L0
0x003F       [1]    FARG_ManTransmitByte_byte
0x0040       [1]    ManTransmitByte_i_L0
0x0041       [1]    FARG_ManTransmitBit_bit_t
0x0041       [1]    FARG_ManCheckSumm_data_t
0x0042       [1]    ManCheckSumm_i_L0
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x008C       [1]    TRISA
0x008E       [1]    TRISC
0x0095       [1]    OPTION_REG
0x0097       [1]    WDTCON
0x0099       [1]    OSCCON
0x010E       [1]    LATC
0x018C       [1]    ANSELA
0x020C       [1]    WPUA
0x0392       [1]    IOCAN
0x0393       [1]    IOCAF
//** Label List: ** 
//----------------------------------------------
  L_ManBufAddByte0
  L_ManTransmitData1
  L_ManTransmitData2
  L_ManTransmitData3
  L_ManTransmitData4
  L_ManTransmitData5
  L_ManTransmitData6
  L_ManTransmitData7
  L_ManTransmitData8
  L_ManTransmitData9
  L_ManTransmitData10
  L_ManTransmitByte11
  L_ManTransmitByte12
  L_ManTransmitByte13
  L_ManTransmitByte14
  L_ManTransmitByte15
  L_ManTransmitBit16
  L_ManTransmitBit17
  L_ManPause18
  L_ManCheckSumm19
  L_ManCheckSumm20
  L_ManCheckSumm21
  L_ManCheckSumm22
  L_ManCheckSumm23
  L_interrupt24
  L_main25
  L_main26
  L_main27
  L_main28
  L_main29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L__main39
  L_end_ManInit
  _ManInit
  L_end_ManBufAddByte
  _ManBufAddByte
  L_end_ManTransmitData
  _ManTransmitData
  L_end_ManTransmitByte
  _ManTransmitByte
  L_end_ManTransmitBit
  _ManTransmitBit
  L_end_ManPause
  _ManPause
  L_end_ManCheckSumm
  _ManCheckSumm
  L_end_interrupt
  _interrupt
  L__interrupt48
  L__interrupt49
  L__interrupt50
  L_end_main
  _main
  L_Button0
  L_Button1
  L_Button2
  L_Button3
  L_end_Button
  _Button
  L__Button5
  L__Button6
  L_Delay_10us0
  L_Delay_22us1
  L_Delay_50us2
  L_Delay_80us3
  L_Delay_500us4
  L_Delay_5500us5
  L_Delay_1ms6
  L_Delay_5ms7
  L_Delay_8ms8
  L_Delay_10ms9
  L_Delay_100ms10
  L_Delay_1sec11
  L_boot16_Delay_5ms12
  L_Delay_Cyc13
  L_Delay_Cyc14
  L_VDelay_ms15
  L_VDelay_ms16
  L_VDelay_ms17
  L_VDelay_Advanced_ms18
  L_VDelay_Advanced_ms19
  L_VDelay_Advanced_ms20
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  L_end_boot16_Delay_5ms
  _boot16_Delay_5ms
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_VDelay_ms
  _VDelay_ms
  L__VDelay_ms38
  L__VDelay_ms39
  L__VDelay_ms40
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L__VDelay_Advanced_ms42
  L__VDelay_Advanced_ms43
  L__VDelay_Advanced_ms44
  L_CA2A_Loop
  L_CA2AW_Loop
  L_CS2S_Loop
  L_CS2S_End
  L_FZinS_Loop
  L_FZinS_End
  _CC2D_Loop1
  _CC2DL_Loop1
  L_end_____DoIFC
  _____DoIFC
  L_end___CA2A
  ___CA2A
  L_end___CA2AW
  ___CA2AW
  L_end___CS2S
  ___CS2S
  L_end___FZinS
  ___FZinS
  L_end___CC2D
  ___CC2D
  L_end___CC2DW
  ___CC2DW
  L_end_Swap
  _Swap
  L_ManBufAddByte0
  L_ManTransmitData1
  L_ManTransmitData2
  L_ManTransmitData3
  L_ManTransmitData4
  L_ManTransmitData5
  L_ManTransmitData6
  L_ManTransmitData7
  L_ManTransmitData8
  L_ManTransmitData9
  L_ManTransmitData10
  L_ManTransmitByte11
  L_ManTransmitByte12
  L_ManTransmitByte13
  L_ManTransmitByte14
  L_ManTransmitByte15
  L_ManTransmitBit16
  L_ManTransmitBit17
  L_ManPause18
  L_ManCheckSumm19
  L_ManCheckSumm20
  L_ManCheckSumm21
  L_ManCheckSumm22
  L_ManCheckSumm23
  L_interrupt24
  L_main25
  L_main26
  L_main27
  L_main28
  L_main29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L__main39
  L_end_ManInit
  _ManInit
  L_end_ManBufAddByte
  _ManBufAddByte
  L_end_ManTransmitData
  _ManTransmitData
  L_end_ManTransmitByte
  _ManTransmitByte
  L_end_ManTransmitBit
  _ManTransmitBit
  L_end_ManPause
  _ManPause
  L_end_ManCheckSumm
  _ManCheckSumm
  L_end_interrupt
  _interrupt
  L__interrupt48
  L__interrupt49
  L__interrupt50
  L_end_main
  _main
