;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 11.07.2015 12:37:53
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x29DA      	GOTO       474
_interrupt:
;Manch_16f1825_rx.c,135 :: 		void interrupt (void)  {
0x0004	0x0870      	MOVF       R0, 0
0x0005	0x0020      	MOVLB      0
0x0006	0x00A2      	MOVWF      34
0x0007	0x0871      	MOVF       R1, 0
0x0008	0x00A1      	MOVWF      33
0x0009	0x0872      	MOVF       R2, 0
0x000A	0x00A0      	MOVWF      32
;Manch_16f1825_rx.c,136 :: 		if( PIE3.TMR6IE && PIR3.TMR6IF ) {
0x000B	0x3180      	MOVLP      0
0x000C	0x0021      	MOVLB      1
0x000D	0x1D93      	BTFSS      PIE3, 3
0x000E	0x2830      	GOTO       L_interrupt3
0x000F	0x0020      	MOVLB      0
0x0010	0x1D93      	BTFSS      PIR3, 3
0x0011	0x2830      	GOTO       L_interrupt3
L__interrupt64:
;Manch_16f1825_rx.c,137 :: 		PIR3.TMR6IF=0;
0x0012	0x1193      	BCF        PIR3, 3
;Manch_16f1825_rx.c,138 :: 		if( timeOffOut_counter <0)
0x0013	0x3080      	MOVLW      128
0x0014	0x0639      	XORWF      _timeOffOut_counter+1, 0
0x0015	0x00F0      	MOVWF      R0
0x0016	0x3080      	MOVLW      128
0x0017	0x0270      	SUBWF      R0, 0
0x0018	0x1D03      	BTFSS      STATUS, 2
0x0019	0x281C      	GOTO       L__interrupt70
0x001A	0x3000      	MOVLW      0
0x001B	0x0238      	SUBWF      _timeOffOut_counter, 0
L__interrupt70:
0x001C	0x1803      	BTFSC      STATUS, 0
0x001D	0x2821      	GOTO       L_interrupt4
;Manch_16f1825_rx.c,139 :: 		timeOffOut_counter++;
0x001E	0x0AB8      	INCF       _timeOffOut_counter, 1
0x001F	0x1903      	BTFSC      STATUS, 2
0x0020	0x0AB9      	INCF       _timeOffOut_counter+1, 1
L_interrupt4:
;Manch_16f1825_rx.c,140 :: 		if(timeOffDevice_counter <0)
0x0021	0x3080      	MOVLW      128
0x0022	0x0643      	XORWF      _timeOffDevice_counter+1, 0
0x0023	0x00F0      	MOVWF      R0
0x0024	0x3080      	MOVLW      128
0x0025	0x0270      	SUBWF      R0, 0
0x0026	0x1D03      	BTFSS      STATUS, 2
0x0027	0x282A      	GOTO       L__interrupt71
0x0028	0x3000      	MOVLW      0
0x0029	0x0242      	SUBWF      _timeOffDevice_counter, 0
L__interrupt71:
0x002A	0x1803      	BTFSC      STATUS, 0
0x002B	0x282F      	GOTO       L_interrupt5
;Manch_16f1825_rx.c,141 :: 		timeOffDevice_counter++;
0x002C	0x0AC2      	INCF       _timeOffDevice_counter, 1
0x002D	0x1903      	BTFSC      STATUS, 2
0x002E	0x0AC3      	INCF       _timeOffDevice_counter+1, 1
L_interrupt5:
;Manch_16f1825_rx.c,143 :: 		asm {clrwdt};                                    //сброс собаки
0x002F	0x0064      	CLRWDT
;Manch_16f1825_rx.c,144 :: 		}
L_interrupt3:
;Manch_16f1825_rx.c,149 :: 		if (INTCON.T0IF && INTCON.T0IE)
0x0030	0x1D0B      	BTFSS      INTCON, 2
0x0031	0x2845      	GOTO       L_interrupt8
0x0032	0x1E8B      	BTFSS      INTCON, 5
0x0033	0x2845      	GOTO       L_interrupt8
L__interrupt63:
;Manch_16f1825_rx.c,152 :: 		INTCON.T0IF=0;                                              //сбросить флаг переполнения таймера
0x0034	0x110B      	BCF        INTCON, 2
;Manch_16f1825_rx.c,153 :: 		if (INTCON.IOCIE==1)                                        //если ожидали внеш прерывания от IOC -
0x0035	0x1D8B      	BTFSS      INTCON, 3
0x0036	0x283A      	GOTO       L_interrupt9
;Manch_16f1825_rx.c,154 :: 		ManFlags |= bTIM0_OVF;                              // - отметить переполнение
0x0037	0x0020      	MOVLB      0
0x0038	0x14BF      	BSF        _ManFlags, 1
0x0039	0x2845      	GOTO       L_interrupt10
L_interrupt9:
0x003A	0x0020      	MOVLB      0
;Manch_16f1825_rx.c,158 :: 		if (MAN_IN_PIN & MAN_IN_LINE)    {
0x003B	0x1E0C      	BTFSS      PORTA, 4
0x003C	0x283F      	GOTO       L_interrupt11
;Manch_16f1825_rx.c,159 :: 		ManFlags |= bLINE_VAL;
0x003D	0x153F      	BSF        _ManFlags, 2
;Manch_16f1825_rx.c,160 :: 		}
0x003E	0x2840      	GOTO       L_interrupt12
L_interrupt11:
;Manch_16f1825_rx.c,163 :: 		ManFlags &= ~bLINE_VAL;
0x003F	0x113F      	BCF        _ManFlags, 2
;Manch_16f1825_rx.c,164 :: 		}
L_interrupt12:
;Manch_16f1825_rx.c,166 :: 		INTCON.IOCIE=1;                                        //включить внешние прерывания от IOC
0x0040	0x158B      	BSF        INTCON, 3
;Manch_16f1825_rx.c,167 :: 		INTCON.IOCIF=0;                                        //сбросить возможно проскочившее прерывание
0x0041	0x100B      	BCF        INTCON, 0
;Manch_16f1825_rx.c,168 :: 		IOCAF.IOCAF4=0;                                        //--''--
0x0042	0x0027      	MOVLB      7
0x0043	0x1213      	BCF        IOCAF, 4
;Manch_16f1825_rx.c,170 :: 		asm {clrwdt};                                    //сброс собаки
0x0044	0x0064      	CLRWDT
;Manch_16f1825_rx.c,171 :: 		}
L_interrupt10:
;Manch_16f1825_rx.c,173 :: 		}
L_interrupt8:
;Manch_16f1825_rx.c,177 :: 		if (INTCON.IOCIE && INTCON.IOCIF && IOCAF.IOCAF4)
0x0045	0x1D8B      	BTFSS      INTCON, 3
0x0046	0x28DC      	GOTO       L_interrupt15
0x0047	0x1C0B      	BTFSS      INTCON, 0
0x0048	0x28DC      	GOTO       L_interrupt15
0x0049	0x0027      	MOVLB      7
0x004A	0x1E13      	BTFSS      IOCAF, 4
0x004B	0x28DC      	GOTO       L_interrupt15
L__interrupt62:
;Manch_16f1825_rx.c,181 :: 		TimerVal = TMR0;
0x004C	0x0020      	MOVLB      0
0x004D	0x0815      	MOVF       TMR0, 0
0x004E	0x00B7      	MOVWF      _TimerVal
;Manch_16f1825_rx.c,182 :: 		TMR0 = 255 - ((MAN_PERIOD_LEN )* 3 / 4);               //счетчик таймера настроить на 3/4 длины периода MANCHESTER бита данных
0x004F	0x30D1      	MOVLW      209
0x0050	0x0095      	MOVWF      TMR0
;Manch_16f1825_rx.c,183 :: 		INTCON.IOCIE=0;                                        //выключить внешнее прерывание
0x0051	0x118B      	BCF        INTCON, 3
;Manch_16f1825_rx.c,184 :: 		INTCON.IOCIF=0;                                        //на случай ВЧ сигнала сбросить возможно проскочившее повторное прерывание
0x0052	0x100B      	BCF        INTCON, 0
;Manch_16f1825_rx.c,185 :: 		IOCAF.IOCAF4=0;
0x0053	0x0027      	MOVLB      7
0x0054	0x1213      	BCF        IOCAF, 4
;Manch_16f1825_rx.c,188 :: 		if ( (TimerVal > (MAN_PERIOD_LEN/2)) || (ManFlags & bTIM0_OVF))
0x0055	0x0020      	MOVLB      0
0x0056	0x0837      	MOVF       _TimerVal, 0
0x0057	0x3C1F      	SUBLW      31
0x0058	0x1C03      	BTFSS      STATUS, 0
0x0059	0x285D      	GOTO       L__interrupt61
0x005A	0x18BF      	BTFSC      _ManFlags, 1
0x005B	0x285D      	GOTO       L__interrupt61
0x005C	0x2862      	GOTO       L_interrupt18
L__interrupt61:
;Manch_16f1825_rx.c,191 :: 		Ini :
___interrupt_Ini:
;Manch_16f1825_rx.c,192 :: 		asm {clrwdt};                                    //сброс собаки
0x005D	0x0064      	CLRWDT
;Manch_16f1825_rx.c,194 :: 		ManFlags &= ~(bTIM0_OVF);                       //сбросить флаг переполнения
0x005E	0x10BF      	BCF        _ManFlags, 1
;Manch_16f1825_rx.c,195 :: 		ManFlags |= bHEADER_RCV;                        //ожидать прием заголовка
0x005F	0x15BF      	BSF        _ManFlags, 3
;Manch_16f1825_rx.c,196 :: 		ByteCounter = 0;                                //начать прием с начала
0x0060	0x01BE      	CLRF       _ByteCounter
;Manch_16f1825_rx.c,197 :: 		ByteIn = 0x00;                                  //очистить байт приемник
0x0061	0x01BB      	CLRF       _ByteIn
;Manch_16f1825_rx.c,199 :: 		}
L_interrupt18:
;Manch_16f1825_rx.c,202 :: 		ByteIn <<= 1;                                           //сдвигаем байт перед записью бита
0x0062	0x35BB      	LSLF       _ByteIn, 1
;Manch_16f1825_rx.c,204 :: 		if (! (ManFlags & bLINE_VAL))   {
0x0063	0x193F      	BTFSC      _ManFlags, 2
0x0064	0x2866      	GOTO       L_interrupt19
;Manch_16f1825_rx.c,205 :: 		ByteIn |= 1;
0x0065	0x143B      	BSF        _ByteIn, 0
;Manch_16f1825_rx.c,206 :: 		}
L_interrupt19:
;Manch_16f1825_rx.c,210 :: 		if (ManFlags & bHEADER_RCV)
0x0066	0x1DBF      	BTFSS      _ManFlags, 3
0x0067	0x28B5      	GOTO       L_interrupt20
;Manch_16f1825_rx.c,213 :: 		if (ByteCounter == 0)
0x0068	0x083E      	MOVF       _ByteCounter, 0
0x0069	0x3A00      	XORLW      0
0x006A	0x1D03      	BTFSS      STATUS, 2
0x006B	0x2881      	GOTO       L_interrupt21
;Manch_16f1825_rx.c,215 :: 		Invert = ~ManIdentifier [0];
0x006C	0x0923      	COMF       _ManIdentifier, 0
0x006D	0x00A6      	MOVWF      _Invert
;Manch_16f1825_rx.c,217 :: 		if (ByteIn != ManIdentifier [0]) {                            //?????? я добавил скобки
0x006E	0x083B      	MOVF       _ByteIn, 0
0x006F	0x0623      	XORWF      _ManIdentifier, 0
0x0070	0x1903      	BTFSC      STATUS, 2
0x0071	0x2877      	GOTO       L_interrupt22
;Manch_16f1825_rx.c,219 :: 		if (ByteIn != Invert)
0x0072	0x083B      	MOVF       _ByteIn, 0
0x0073	0x0626      	XORWF      _Invert, 0
0x0074	0x1903      	BTFSC      STATUS, 2
0x0075	0x2877      	GOTO       L_interrupt23
;Manch_16f1825_rx.c,221 :: 		return;                                        //пока нет совпадения - выход
0x0076	0x28DC      	GOTO       L__interrupt69
L_interrupt23:
;Manch_16f1825_rx.c,222 :: 		}
L_interrupt22:
;Manch_16f1825_rx.c,223 :: 		if (ByteIn == ManIdentifier [0]) {
0x0077	0x083B      	MOVF       _ByteIn, 0
0x0078	0x0623      	XORWF      _ManIdentifier, 0
0x0079	0x1D03      	BTFSS      STATUS, 2
0x007A	0x287D      	GOTO       L_interrupt24
;Manch_16f1825_rx.c,224 :: 		ManFlags &= ~bLINE_INV;                //прямое совпадение
0x007B	0x123F      	BCF        _ManFlags, 4
;Manch_16f1825_rx.c,226 :: 		}
0x007C	0x287E      	GOTO       L_interrupt25
L_interrupt24:
;Manch_16f1825_rx.c,229 :: 		ManFlags |= bLINE_INV;                //инверсное совпадение
0x007D	0x163F      	BSF        _ManFlags, 4
;Manch_16f1825_rx.c,230 :: 		}
L_interrupt25:
;Manch_16f1825_rx.c,231 :: 		BitCounter = 0;                                        //готовимся к приему следующих байтов хедера
0x007E	0x01BC      	CLRF       _BitCounter
;Manch_16f1825_rx.c,232 :: 		ByteCounter++;
0x007F	0x0ABE      	INCF       _ByteCounter, 1
;Manch_16f1825_rx.c,233 :: 		return;
0x0080	0x28DC      	GOTO       L__interrupt69
;Manch_16f1825_rx.c,234 :: 		}
L_interrupt21:
;Manch_16f1825_rx.c,236 :: 		asm {clrwdt};                                    //сброс собаки
0x0081	0x0064      	CLRWDT
;Manch_16f1825_rx.c,238 :: 		if (++BitCounter < 8)                                //ждем заполнения байта
0x0082	0x0ABC      	INCF       _BitCounter, 1
0x0083	0x3008      	MOVLW      8
0x0084	0x023C      	SUBWF      _BitCounter, 0
0x0085	0x1803      	BTFSC      STATUS, 0
0x0086	0x2888      	GOTO       L_interrupt26
;Manch_16f1825_rx.c,239 :: 		return;
0x0087	0x28DC      	GOTO       L__interrupt69
L_interrupt26:
;Manch_16f1825_rx.c,241 :: 		if (ManFlags & bLINE_INV)                        //если сигнал инверсный
0x0088	0x1E3F      	BTFSS      _ManFlags, 4
0x0089	0x288B      	GOTO       L_interrupt27
;Manch_16f1825_rx.c,242 :: 		ByteIn = ~ByteIn;
0x008A	0x09BB      	COMF       _ByteIn, 1
L_interrupt27:
;Manch_16f1825_rx.c,244 :: 		if (ManIdentifier [ByteCounter])        //если хедер еще не закончен
0x008B	0x3023      	MOVLW      _ManIdentifier
0x008C	0x0084      	MOVWF      FSR0
0x008D	0x3000      	MOVLW      hi_addr(_ManIdentifier)
0x008E	0x0085      	MOVWF      FSR0H
0x008F	0x083E      	MOVF       _ByteCounter, 0
0x0090	0x0784      	ADDWF      FSR0, 1
0x0091	0x1803      	BTFSC      STATUS, 0
0x0092	0x0A85      	INCF       FSR0H, 1
0x0093	0x0800      	MOVF       INDF0, 0
0x0094	0x1903      	BTFSC      STATUS, 2
0x0095	0x28A6      	GOTO       L_interrupt28
;Manch_16f1825_rx.c,246 :: 		if (ByteIn != ManIdentifier [ByteCounter]){             //проверяем идентичность хедера
0x0096	0x3023      	MOVLW      _ManIdentifier
0x0097	0x0084      	MOVWF      FSR0
0x0098	0x3000      	MOVLW      hi_addr(_ManIdentifier)
0x0099	0x0085      	MOVWF      FSR0H
0x009A	0x083E      	MOVF       _ByteCounter, 0
0x009B	0x0784      	ADDWF      FSR0, 1
0x009C	0x1803      	BTFSC      STATUS, 0
0x009D	0x0A85      	INCF       FSR0H, 1
0x009E	0x083B      	MOVF       _ByteIn, 0
0x009F	0x0600      	XORWF      INDF0, 0
0x00A0	0x1903      	BTFSC      STATUS, 2
0x00A1	0x28A3      	GOTO       L_interrupt29
;Manch_16f1825_rx.c,247 :: 		goto Ini;                                        //байт не соответствует хедеру - рестарт
0x00A2	0x285D      	GOTO       ___interrupt_Ini
;Manch_16f1825_rx.c,248 :: 		}
L_interrupt29:
;Manch_16f1825_rx.c,249 :: 		BitCounter = 0;
0x00A3	0x01BC      	CLRF       _BitCounter
;Manch_16f1825_rx.c,250 :: 		ByteCounter++;                                         //ожидаем следующий байт хедера
0x00A4	0x0ABE      	INCF       _ByteCounter, 1
;Manch_16f1825_rx.c,251 :: 		return;
0x00A5	0x28DC      	GOTO       L__interrupt69
;Manch_16f1825_rx.c,252 :: 		}
L_interrupt28:
;Manch_16f1825_rx.c,255 :: 		if (ByteIn > MAN_BUF_LENGTH)  {
0x00A6	0x083B      	MOVF       _ByteIn, 0
0x00A7	0x3C10      	SUBLW      16
0x00A8	0x1803      	BTFSC      STATUS, 0
0x00A9	0x28AB      	GOTO       L_interrupt30
;Manch_16f1825_rx.c,257 :: 		goto Ini;                                             //размер блока данных превышает допустимый - рестарт
0x00AA	0x285D      	GOTO       ___interrupt_Ini
;Manch_16f1825_rx.c,259 :: 		}
L_interrupt30:
;Manch_16f1825_rx.c,261 :: 		DataLength = ByteIn;                                        //запомним длину пакета
0x00AB	0x083B      	MOVF       _ByteIn, 0
0x00AC	0x00BD      	MOVWF      _DataLength
;Manch_16f1825_rx.c,263 :: 		CheckSummByte = 0;                                         //очистить байт контрольной суммы
0x00AD	0x01BA      	CLRF       _CheckSummByte
;Manch_16f1825_rx.c,264 :: 		CheckSumm (ByteIn);                                        //подсчет контрольки, начиная с байта длины пакета
0x00AE	0x083B      	MOVF       _ByteIn, 0
0x00AF	0x00CC      	MOVWF      FARG_CheckSumm_dataa
0x00B0	0x21BD      	CALL       _CheckSumm
;Manch_16f1825_rx.c,266 :: 		ManFlags &= ~bHEADER_RCV;                                 //переходим к приему основного файла
0x00B1	0x11BF      	BCF        _ManFlags, 3
;Manch_16f1825_rx.c,267 :: 		BitCounter = 0;
0x00B2	0x01BC      	CLRF       _BitCounter
;Manch_16f1825_rx.c,268 :: 		ByteCounter = 0;
0x00B3	0x01BE      	CLRF       _ByteCounter
;Manch_16f1825_rx.c,269 :: 		return;
0x00B4	0x28DC      	GOTO       L__interrupt69
;Manch_16f1825_rx.c,270 :: 		}
L_interrupt20:
;Manch_16f1825_rx.c,271 :: 		asm {clrwdt};                                    //сброс собаки
0x00B5	0x0064      	CLRWDT
;Manch_16f1825_rx.c,273 :: 		if (++BitCounter < 8)                                        //ждем накопления байта
0x00B6	0x0ABC      	INCF       _BitCounter, 1
0x00B7	0x3008      	MOVLW      8
0x00B8	0x023C      	SUBWF      _BitCounter, 0
0x00B9	0x1803      	BTFSC      STATUS, 0
0x00BA	0x28BC      	GOTO       L_interrupt31
;Manch_16f1825_rx.c,274 :: 		return;
0x00BB	0x28DC      	GOTO       L__interrupt69
L_interrupt31:
;Manch_16f1825_rx.c,275 :: 		BitCounter = 0;
0x00BC	0x01BC      	CLRF       _BitCounter
;Manch_16f1825_rx.c,277 :: 		if (ManFlags & bLINE_INV)                                   //необходима ли инверсия
0x00BD	0x1E3F      	BTFSS      _ManFlags, 4
0x00BE	0x28C0      	GOTO       L_interrupt32
;Manch_16f1825_rx.c,278 :: 		ByteIn = ~ByteIn;
0x00BF	0x09BB      	COMF       _ByteIn, 1
L_interrupt32:
;Manch_16f1825_rx.c,280 :: 		CheckSumm (ByteIn);                                         //подсчет контрольки
0x00C0	0x083B      	MOVF       _ByteIn, 0
0x00C1	0x00CC      	MOVWF      FARG_CheckSumm_dataa
0x00C2	0x21BD      	CALL       _CheckSumm
;Manch_16f1825_rx.c,282 :: 		if (DataLength--) {                                         //если это еще байты пакета -
0x00C3	0x083D      	MOVF       _DataLength, 0
0x00C4	0x00F0      	MOVWF      R0
0x00C5	0x03BD      	DECF       _DataLength, 1
0x00C6	0x0870      	MOVF       R0, 0
0x00C7	0x1903      	BTFSC      STATUS, 2
0x00C8	0x28D5      	GOTO       L_interrupt33
;Manch_16f1825_rx.c,283 :: 		ManBuffer [ByteCounter++] = ByteIn;                   // - сохраняем принятый байт
0x00C9	0x3027      	MOVLW      _ManBuffer
0x00CA	0x0086      	MOVWF      FSR1
0x00CB	0x3000      	MOVLW      hi_addr(_ManBuffer)
0x00CC	0x0087      	MOVWF      FSR1H
0x00CD	0x083E      	MOVF       _ByteCounter, 0
0x00CE	0x0786      	ADDWF      FSR1, 1
0x00CF	0x1803      	BTFSC      STATUS, 0
0x00D0	0x0A87      	INCF       FSR1H, 1
0x00D1	0x083B      	MOVF       _ByteIn, 0
0x00D2	0x0081      	MOVWF      INDF1
0x00D3	0x0ABE      	INCF       _ByteCounter, 1
;Manch_16f1825_rx.c,284 :: 		}
0x00D4	0x28DB      	GOTO       L_interrupt34
L_interrupt33:
;Manch_16f1825_rx.c,288 :: 		if (CheckSummByte) {                              //если контролька не верна (не 0) -
0x00D5	0x083A      	MOVF       _CheckSummByte, 0
0x00D6	0x1903      	BTFSC      STATUS, 2
0x00D7	0x28D9      	GOTO       L_interrupt35
;Manch_16f1825_rx.c,289 :: 		goto Ini;                                   // - рестарт
0x00D8	0x285D      	GOTO       ___interrupt_Ini
;Manch_16f1825_rx.c,290 :: 		}
L_interrupt35:
;Manch_16f1825_rx.c,293 :: 		ManFlags |= bDATA_ENBL;                          //установить флаг наличия данных
0x00D9	0x143F      	BSF        _ManFlags, 0
;Manch_16f1825_rx.c,294 :: 		ManReceiveStop ();                               //тормозим дальнейший прием
0x00DA	0x21B8      	CALL       _ManReceiveStop
;Manch_16f1825_rx.c,295 :: 		}
L_interrupt34:
;Manch_16f1825_rx.c,298 :: 		asm {clrwdt};                                    //сброс собаки
0x00DB	0x0064      	CLRWDT
;Manch_16f1825_rx.c,299 :: 		}
L_interrupt15:
;Manch_16f1825_rx.c,300 :: 		}
L_end_interrupt:
L__interrupt69:
0x00DC	0x0020      	MOVLB      0
0x00DD	0x0822      	MOVF       34, 0
0x00DE	0x00F0      	MOVWF      R0
0x00DF	0x0821      	MOVF       33, 0
0x00E0	0x00F1      	MOVWF      R1
0x00E1	0x0820      	MOVF       32, 0
0x00E2	0x00F2      	MOVWF      R2
0x00E3	0x0009      	RETFIE     %s
; end of _interrupt
_Mul_16x16_U:
;__Lib_Math.c,136 :: 		
;__Lib_Math.c,143 :: 		
0x00E4	0x0020      	MOVLB      0
;__Lib_Math.c,144 :: 		
0x00E5	0x01FB      	CLRF       R11
;__Lib_Math.c,145 :: 		
0x00E6	0x01FA      	CLRF       R10
;__Lib_Math.c,146 :: 		
0x00E7	0x01F9      	CLRF       R9
;__Lib_Math.c,147 :: 		
0x00E8	0x3080      	MOVLW      128
;__Lib_Math.c,148 :: 		
0x00E9	0x00F8      	MOVWF      R8
;__Lib_Math.c,149 :: 		
0x00EA	0x0CF1      	RRF        R1, 1
;__Lib_Math.c,150 :: 		
0x00EB	0x0CF0      	RRF        R0, 1
;__Lib_Math.c,151 :: 		
0x00EC	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,152 :: 		
0x00ED	0x28F7      	GOTO       $+10
;__Lib_Math.c,153 :: 		
0x00EE	0x0874      	MOVF       R4, 0
;__Lib_Math.c,154 :: 		
0x00EF	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,155 :: 		
0x00F0	0x0875      	MOVF       R5, 0
;__Lib_Math.c,156 :: 		
0x00F1	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,157 :: 		
0x00F2	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,158 :: 		
0x00F3	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,159 :: 		
0x00F4	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,160 :: 		
0x00F5	0x0AFB      	INCF       R11, 1
;__Lib_Math.c,161 :: 		
0x00F6	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,162 :: 		
0x00F7	0x1FF0      	BTFSS      R0, 7
;__Lib_Math.c,163 :: 		
0x00F8	0x28FF      	GOTO       $+7
;__Lib_Math.c,164 :: 		
0x00F9	0x0874      	MOVF       R4, 0
;__Lib_Math.c,165 :: 		
0x00FA	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,166 :: 		
0x00FB	0x0875      	MOVF       R5, 0
;__Lib_Math.c,167 :: 		
0x00FC	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,168 :: 		
0x00FD	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,169 :: 		
0x00FE	0x07FB      	ADDWF      R11, 1
;__Lib_Math.c,170 :: 		
0x00FF	0x0CFB      	RRF        R11, 1
;__Lib_Math.c,171 :: 		
0x0100	0x0CFA      	RRF        R10, 1
;__Lib_Math.c,172 :: 		
0x0101	0x0CF9      	RRF        R9, 1
;__Lib_Math.c,173 :: 		
0x0102	0x0CF8      	RRF        R8, 1
;__Lib_Math.c,174 :: 		
0x0103	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,175 :: 		
0x0104	0x28EA      	GOTO       $-26
;__Lib_Math.c,176 :: 		
0x0105	0x087B      	MOVF       R11, 0
;__Lib_Math.c,177 :: 		
0x0106	0x00F3      	MOVWF      R3
;__Lib_Math.c,178 :: 		
0x0107	0x087A      	MOVF       R10, 0
;__Lib_Math.c,179 :: 		
0x0108	0x00F2      	MOVWF      R2
;__Lib_Math.c,180 :: 		
0x0109	0x0879      	MOVF       R9, 0
;__Lib_Math.c,181 :: 		
0x010A	0x00F1      	MOVWF      R1
;__Lib_Math.c,182 :: 		
0x010B	0x0878      	MOVF       R8, 0
;__Lib_Math.c,183 :: 		
0x010C	0x00F0      	MOVWF      R0
;__Lib_Math.c,186 :: 		
L_end_Mul_16x16_U:
0x010D	0x0008      	RETURN
; end of _Mul_16x16_U
___CC2DW:
;__Lib_System.c,71 :: 		
;__Lib_System.c,73 :: 		
_CC2DL_Loop1:
;__Lib_System.c,74 :: 		
0x010E	0x0012      	MOVIW      FSR0++ 
;__Lib_System.c,75 :: 		
0x010F	0x001E      	MOVWI      FSR1++ 
;__Lib_System.c,76 :: 		
0x0110	0x03F0      	DECF       R0, 1
;__Lib_System.c,77 :: 		
0x0111	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,78 :: 		
0x0112	0x290E      	GOTO       _CC2DL_Loop1
;__Lib_System.c,79 :: 		
0x0113	0x03F1      	DECF       R1, 1
;__Lib_System.c,80 :: 		
0x0114	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,81 :: 		
0x0115	0x290E      	GOTO       _CC2DL_Loop1
;__Lib_System.c,83 :: 		
L_end___CC2DW:
0x0116	0x0008      	RETURN
; end of ___CC2DW
_PWM1_Init:
;__Lib_PWM_c53a2c1.c,2 :: 		
;__Lib_PWM_c53a2c1.c,3 :: 		
;__Lib_PWM_c53a2c1.c,4 :: 		
0x0117	0x0025      	MOVLB      5
0x0118	0x0191      	CLRF       CCPR1L
;__Lib_PWM_c53a2c1.c,5 :: 		
0x0119	0x1213      	BCF        CCP1CON, 4
;__Lib_PWM_c53a2c1.c,6 :: 		
0x011A	0x1293      	BCF        CCP1CON, 5
;__Lib_PWM_c53a2c1.c,7 :: 		
L_end_PWM1_Init:
0x011B	0x0008      	RETURN
; end of _PWM1_Init
_PWM1_Start:
;__Lib_PWM_c53a2c1.c,20 :: 		
;__Lib_PWM_c53a2c1.c,21 :: 		
0x011C	0x0021      	MOVLB      1
0x011D	0x128E      	BCF        TRISC5_bit, BitPos(TRISC5_bit+0)
;__Lib_PWM_c53a2c1.c,22 :: 		
0x011E	0x0020      	MOVLB      0
0x011F	0x151C      	BSF        T2CON, 2
;__Lib_PWM_c53a2c1.c,23 :: 		
0x0120	0x300C      	MOVLW      12
0x0121	0x0025      	MOVLB      5
0x0122	0x0493      	IORWF       CCP1CON, 1
;__Lib_PWM_c53a2c1.c,24 :: 		
L_end_PWM1_Start:
0x0123	0x0008      	RETURN
; end of _PWM1_Start
_PWM1_Set_Duty:
;__Lib_PWM_c53a2c1.c,9 :: 		
;__Lib_PWM_c53a2c1.c,13 :: 		
0x0124	0x0020      	MOVLB      0
0x0125	0x081B      	MOVF       PR2, 0
0x0126	0x3E01      	ADDLW      1
0x0127	0x00F0      	MOVWF      R0
0x0128	0x01F1      	CLRF       R1
0x0129	0x3000      	MOVLW      0
0x012A	0x3DF1      	ADDWFC     R1, 1
0x012B	0x0848      	MOVF       FARG_PWM1_Set_Duty_new_duty, 0
0x012C	0x00F4      	MOVWF      R4
0x012D	0x01F5      	CLRF       R5
0x012E	0x20E4      	CALL       _Mul_16x16_U
0x012F	0x3006      	MOVLW      6
0x0130	0x00F2      	MOVWF      R2
0x0131	0x0870      	MOVF       R0, 0
0x0132	0x00F4      	MOVWF      R4
0x0133	0x0871      	MOVF       R1, 0
0x0134	0x00F5      	MOVWF      R5
0x0135	0x0872      	MOVF       R2, 0
L__PWM1_Set_Duty2:
0x0136	0x1903      	BTFSC      STATUS, 2
0x0137	0x293C      	GOTO       L__PWM1_Set_Duty3
0x0138	0x36F5      	LSRF       R5, 1
0x0139	0x0CF4      	RRF        R4, 1
0x013A	0x3EFF      	ADDLW      255
0x013B	0x2936      	GOTO       L__PWM1_Set_Duty2
L__PWM1_Set_Duty3:
;__Lib_PWM_c53a2c1.c,14 :: 		
0x013C	0x3004      	MOVLW      4
0x013D	0x00F1      	MOVWF      R1
0x013E	0x0874      	MOVF       R4, 0
0x013F	0x00F0      	MOVWF      R0
0x0140	0x0871      	MOVF       R1, 0
L__PWM1_Set_Duty4:
0x0141	0x1903      	BTFSC      STATUS, 2
0x0142	0x2946      	GOTO       L__PWM1_Set_Duty5
0x0143	0x35F0      	LSLF       R0, 1
0x0144	0x3EFF      	ADDLW      255
0x0145	0x2941      	GOTO       L__PWM1_Set_Duty4
L__PWM1_Set_Duty5:
0x0146	0x3030      	MOVLW      48
0x0147	0x0570      	ANDWF      R0, 0
0x0148	0x00F3      	MOVWF      R3
;__Lib_PWM_c53a2c1.c,15 :: 		
0x0149	0x0874      	MOVF       R4, 0
0x014A	0x00F0      	MOVWF      R0
0x014B	0x0875      	MOVF       R5, 0
0x014C	0x00F1      	MOVWF      R1
0x014D	0x36F1      	LSRF       R1, 1
0x014E	0x0CF0      	RRF        R0, 1
0x014F	0x36F1      	LSRF       R1, 1
0x0150	0x0CF0      	RRF        R0, 1
0x0151	0x0870      	MOVF       R0, 0
0x0152	0x0025      	MOVLB      5
0x0153	0x0091      	MOVWF      CCPR1L
;__Lib_PWM_c53a2c1.c,16 :: 		
0x0154	0x300F      	MOVLW      15
0x0155	0x0593      	ANDWF      CCP1CON, 1
;__Lib_PWM_c53a2c1.c,17 :: 		
0x0156	0x0873      	MOVF       R3, 0
0x0157	0x0493      	IORWF       CCP1CON, 1
;__Lib_PWM_c53a2c1.c,18 :: 		
L_end_PWM1_Set_Duty:
0x0158	0x0008      	RETURN
; end of _PWM1_Set_Duty
_ManRcvDataCheck:
;Manch_16f1825_rx.c,121 :: 		unsigned char* ManRcvDataCheck (void)
;Manch_16f1825_rx.c,123 :: 		if (ManFlags & bDATA_ENBL)                             //проверка наличия принятых данных
0x0159	0x0020      	MOVLB      0
0x015A	0x1C3F      	BTFSS      _ManFlags, 0
0x015B	0x2962      	GOTO       L_ManRcvDataCheck0
;Manch_16f1825_rx.c,125 :: 		ManFlags &= ~bDATA_ENBL;                       //очистить флаг наличия данных
0x015C	0x103F      	BCF        _ManFlags, 0
;Manch_16f1825_rx.c,126 :: 		return ManBuffer;                              //при наличии данных - возвращаем указатель на буффер
0x015D	0x3027      	MOVLW      _ManBuffer
0x015E	0x00F0      	MOVWF      R0
0x015F	0x3000      	MOVLW      hi_addr(_ManBuffer)
0x0160	0x00F1      	MOVWF      R1
0x0161	0x2964      	GOTO       L_end_ManRcvDataCheck
;Manch_16f1825_rx.c,127 :: 		}
L_ManRcvDataCheck0:
;Manch_16f1825_rx.c,128 :: 		return 0;                                              //при отсутствии данных - возвращаем 0
0x0162	0x01F0      	CLRF       R0
0x0163	0x01F1      	CLRF       R1
;Manch_16f1825_rx.c,129 :: 		}
L_end_ManRcvDataCheck:
0x0164	0x0008      	RETURN
; end of _ManRcvDataCheck
_PWM2_Init:
;__Lib_PWM_c53a2c1.c,33 :: 		
;__Lib_PWM_c53a2c1.c,34 :: 		
;__Lib_PWM_c53a2c1.c,35 :: 		
0x0165	0x0025      	MOVLB      5
0x0166	0x0198      	CLRF       CCPR2L
;__Lib_PWM_c53a2c1.c,36 :: 		
0x0167	0x121A      	BCF        CCP2CON, 4
;__Lib_PWM_c53a2c1.c,37 :: 		
0x0168	0x129A      	BCF        CCP2CON, 5
;__Lib_PWM_c53a2c1.c,38 :: 		
L_end_PWM2_Init:
0x0169	0x0008      	RETURN
; end of _PWM2_Init
_PWM2_Start:
;__Lib_PWM_c53a2c1.c,51 :: 		
;__Lib_PWM_c53a2c1.c,52 :: 		
0x016A	0x0021      	MOVLB      1
0x016B	0x118E      	BCF        TRISC3_bit, BitPos(TRISC3_bit+0)
;__Lib_PWM_c53a2c1.c,53 :: 		
0x016C	0x0020      	MOVLB      0
0x016D	0x151C      	BSF        T2CON, 2
;__Lib_PWM_c53a2c1.c,54 :: 		
0x016E	0x300C      	MOVLW      12
0x016F	0x0025      	MOVLB      5
0x0170	0x049A      	IORWF       CCP2CON, 1
;__Lib_PWM_c53a2c1.c,55 :: 		
L_end_PWM2_Start:
0x0171	0x0008      	RETURN
; end of _PWM2_Start
_PWM2_Set_Duty:
;__Lib_PWM_c53a2c1.c,40 :: 		
;__Lib_PWM_c53a2c1.c,44 :: 		
0x0172	0x0020      	MOVLB      0
0x0173	0x081B      	MOVF       PR2, 0
0x0174	0x3E01      	ADDLW      1
0x0175	0x00F0      	MOVWF      R0
0x0176	0x01F1      	CLRF       R1
0x0177	0x3000      	MOVLW      0
0x0178	0x3DF1      	ADDWFC     R1, 1
0x0179	0x0848      	MOVF       FARG_PWM2_Set_Duty_new_duty, 0
0x017A	0x00F4      	MOVWF      R4
0x017B	0x01F5      	CLRF       R5
0x017C	0x20E4      	CALL       _Mul_16x16_U
0x017D	0x3006      	MOVLW      6
0x017E	0x00F2      	MOVWF      R2
0x017F	0x0870      	MOVF       R0, 0
0x0180	0x00F4      	MOVWF      R4
0x0181	0x0871      	MOVF       R1, 0
0x0182	0x00F5      	MOVWF      R5
0x0183	0x0872      	MOVF       R2, 0
L__PWM2_Set_Duty10:
0x0184	0x1903      	BTFSC      STATUS, 2
0x0185	0x298A      	GOTO       L__PWM2_Set_Duty11
0x0186	0x36F5      	LSRF       R5, 1
0x0187	0x0CF4      	RRF        R4, 1
0x0188	0x3EFF      	ADDLW      255
0x0189	0x2984      	GOTO       L__PWM2_Set_Duty10
L__PWM2_Set_Duty11:
;__Lib_PWM_c53a2c1.c,45 :: 		
0x018A	0x3004      	MOVLW      4
0x018B	0x00F1      	MOVWF      R1
0x018C	0x0874      	MOVF       R4, 0
0x018D	0x00F0      	MOVWF      R0
0x018E	0x0871      	MOVF       R1, 0
L__PWM2_Set_Duty12:
0x018F	0x1903      	BTFSC      STATUS, 2
0x0190	0x2994      	GOTO       L__PWM2_Set_Duty13
0x0191	0x35F0      	LSLF       R0, 1
0x0192	0x3EFF      	ADDLW      255
0x0193	0x298F      	GOTO       L__PWM2_Set_Duty12
L__PWM2_Set_Duty13:
0x0194	0x3030      	MOVLW      48
0x0195	0x0570      	ANDWF      R0, 0
0x0196	0x00F3      	MOVWF      R3
;__Lib_PWM_c53a2c1.c,46 :: 		
0x0197	0x0874      	MOVF       R4, 0
0x0198	0x00F0      	MOVWF      R0
0x0199	0x0875      	MOVF       R5, 0
0x019A	0x00F1      	MOVWF      R1
0x019B	0x36F1      	LSRF       R1, 1
0x019C	0x0CF0      	RRF        R0, 1
0x019D	0x36F1      	LSRF       R1, 1
0x019E	0x0CF0      	RRF        R0, 1
0x019F	0x0870      	MOVF       R0, 0
0x01A0	0x0025      	MOVLB      5
0x01A1	0x0098      	MOVWF      CCPR2L
;__Lib_PWM_c53a2c1.c,47 :: 		
0x01A2	0x300F      	MOVLW      15
0x01A3	0x059A      	ANDWF      CCP2CON, 1
;__Lib_PWM_c53a2c1.c,48 :: 		
0x01A4	0x0873      	MOVF       R3, 0
0x01A5	0x049A      	IORWF       CCP2CON, 1
;__Lib_PWM_c53a2c1.c,49 :: 		
L_end_PWM2_Set_Duty:
0x01A6	0x0008      	RETURN
; end of _PWM2_Set_Duty
_ManReceiveStart:
;Manch_16f1825_rx.c,82 :: 		void ManReceiveStart (void)
;Manch_16f1825_rx.c,85 :: 		INTCON.GIE=0;                                       //запретить все прерывания
0x01A7	0x138B      	BCF        INTCON, 7
;Manch_16f1825_rx.c,87 :: 		OPTION_REG=0b10000101;                             //предделитель на 64 (частота счета 16000000/4 / 32 = 125000 Hz = 8 uS)  //64?????????
0x01A8	0x3085      	MOVLW      133
0x01A9	0x0021      	MOVLB      1
0x01AA	0x0095      	MOVWF      OPTION_REG
;Manch_16f1825_rx.c,88 :: 		INTCON.TMR0IE=1;                                   //прерывание при переполнении
0x01AB	0x168B      	BSF        INTCON, 5
;Manch_16f1825_rx.c,91 :: 		INTCON.IOCIE=1;                                   //разрешение прерываний по изменению уровня
0x01AC	0x158B      	BSF        INTCON, 3
;Manch_16f1825_rx.c,92 :: 		IOCAP.IOCAP4=1;                                   //включить прерывание  по фронту от RA5
0x01AD	0x0027      	MOVLB      7
0x01AE	0x1611      	BSF        IOCAP, 4
;Manch_16f1825_rx.c,93 :: 		IOCAN.IOCAN4=1;                                   //включить прерывание  по спаду от RA5
0x01AF	0x1612      	BSF        IOCAN, 4
;Manch_16f1825_rx.c,98 :: 		ManFlags &= ~(bTIM0_OVF| bDATA_ENBL);             //очистить флаг наличия данных и флаг переполнения
0x01B0	0x30FC      	MOVLW      252
0x01B1	0x0020      	MOVLB      0
0x01B2	0x05BF      	ANDWF      _ManFlags, 1
;Manch_16f1825_rx.c,99 :: 		ManFlags |= bHEADER_RCV;                          //включить режим приема заголовка
0x01B3	0x15BF      	BSF        _ManFlags, 3
;Manch_16f1825_rx.c,100 :: 		ByteCounter = 0;                                  //начать прием с начала
0x01B4	0x01BE      	CLRF       _ByteCounter
;Manch_16f1825_rx.c,101 :: 		ByteIn = 0x00;                                    //очистить байт приемник
0x01B5	0x01BB      	CLRF       _ByteIn
;Manch_16f1825_rx.c,103 :: 		INTCON.GIE=1;                                     //разрешить все прерывания
0x01B6	0x178B      	BSF        INTCON, 7
;Manch_16f1825_rx.c,104 :: 		}
L_end_ManReceiveStart:
0x01B7	0x0008      	RETURN
; end of _ManReceiveStart
_ManReceiveStop:
;Manch_16f1825_rx.c,109 :: 		void ManReceiveStop (void)
;Manch_16f1825_rx.c,111 :: 		INTCON.GIE=0;
0x01B8	0x138B      	BCF        INTCON, 7
;Manch_16f1825_rx.c,112 :: 		INTCON.TMR0IE=0;                                  //выключить "прерывание при переполнении Т0"
0x01B9	0x128B      	BCF        INTCON, 5
;Manch_16f1825_rx.c,113 :: 		INTCON.IOCIE=0;                                   //выключить "внешнее прерывание от IOC"
0x01BA	0x118B      	BCF        INTCON, 3
;Manch_16f1825_rx.c,114 :: 		INTCON.GIE=1;
0x01BB	0x178B      	BSF        INTCON, 7
;Manch_16f1825_rx.c,115 :: 		}
L_end_ManReceiveStop:
0x01BC	0x0008      	RETURN
; end of _ManReceiveStop
_CheckSumm:
;Manch_16f1825_rx.c,308 :: 		void CheckSumm(unsigned char dataa)
;Manch_16f1825_rx.c,309 :: 		{              unsigned char i=0;
0x01BD	0x0020      	MOVLB      0
0x01BE	0x01CD      	CLRF       CheckSumm_i_L0
;Manch_16f1825_rx.c,310 :: 		for ( i=0; i<8; i++)
0x01BF	0x01CD      	CLRF       CheckSumm_i_L0
L_CheckSumm36:
0x01C0	0x3008      	MOVLW      8
0x01C1	0x024D      	SUBWF      CheckSumm_i_L0, 0
0x01C2	0x1803      	BTFSC      STATUS, 0
0x01C3	0x29D9      	GOTO       L_CheckSumm37
;Manch_16f1825_rx.c,312 :: 		unsigned char temp = dataa;
0x01C4	0x084C      	MOVF       FARG_CheckSumm_dataa, 0
0x01C5	0x00F2      	MOVWF      R2
;Manch_16f1825_rx.c,313 :: 		temp ^= CheckSummByte;
0x01C6	0x083A      	MOVF       _CheckSummByte, 0
0x01C7	0x064C      	XORWF      FARG_CheckSumm_dataa, 0
0x01C8	0x00F1      	MOVWF      R1
0x01C9	0x0871      	MOVF       R1, 0
0x01CA	0x00F2      	MOVWF      R2
;Manch_16f1825_rx.c,315 :: 		if (temp & 0x01)        {CheckSummByte ^= 0x18; temp = 0x80;}
0x01CB	0x1C71      	BTFSS      R1, 0
0x01CC	0x29D2      	GOTO       L_CheckSumm39
0x01CD	0x3018      	MOVLW      24
0x01CE	0x06BA      	XORWF      _CheckSummByte, 1
0x01CF	0x3080      	MOVLW      128
0x01D0	0x00F2      	MOVWF      R2
0x01D1	0x29D3      	GOTO       L_CheckSumm40
L_CheckSumm39:
;Manch_16f1825_rx.c,316 :: 		else                                temp = 0;
0x01D2	0x01F2      	CLRF       R2
L_CheckSumm40:
;Manch_16f1825_rx.c,318 :: 		CheckSummByte >>= 1;
0x01D3	0x36BA      	LSRF       _CheckSummByte, 1
;Manch_16f1825_rx.c,319 :: 		CheckSummByte |= temp;
0x01D4	0x0872      	MOVF       R2, 0
0x01D5	0x04BA      	IORWF       _CheckSummByte, 1
;Manch_16f1825_rx.c,320 :: 		dataa >>= 1;
0x01D6	0x36CC      	LSRF       FARG_CheckSumm_dataa, 1
;Manch_16f1825_rx.c,310 :: 		for ( i=0; i<8; i++)
0x01D7	0x0ACD      	INCF       CheckSumm_i_L0, 1
;Manch_16f1825_rx.c,321 :: 		}
0x01D8	0x29C0      	GOTO       L_CheckSumm36
L_CheckSumm37:
;Manch_16f1825_rx.c,322 :: 		}
L_end_CheckSumm:
0x01D9	0x0008      	RETURN
; end of _CheckSumm
_main:
0x01DA	0x3073      	MOVLW      115
0x01DB	0x0020      	MOVLB      0
0x01DC	0x00A3      	MOVWF      _ManIdentifier
0x01DD	0x3068      	MOVLW      104
0x01DE	0x00A4      	MOVWF      36
0x01DF	0x01A5      	CLRF       37
;Manch_16f1825_rx.c,325 :: 		void main (void){
;Manch_16f1825_rx.c,327 :: 		OSCCON=0b11111111;                                  //  16 MHz HF
0x01E0	0x30FF      	MOVLW      255
0x01E1	0x0021      	MOVLB      1
0x01E2	0x0099      	MOVWF      OSCCON
;Manch_16f1825_rx.c,328 :: 		TRISA=0b00010000;
0x01E3	0x3010      	MOVLW      16
0x01E4	0x008C      	MOVWF      TRISA
;Manch_16f1825_rx.c,329 :: 		PORTA=0b00000000;
0x01E5	0x0020      	MOVLB      0
0x01E6	0x018C      	CLRF       PORTA
;Manch_16f1825_rx.c,330 :: 		TRISC=0b00000000;
0x01E7	0x0021      	MOVLB      1
0x01E8	0x018E      	CLRF       TRISC
;Manch_16f1825_rx.c,331 :: 		PORTC=0b00000000;
0x01E9	0x0020      	MOVLB      0
0x01EA	0x018E      	CLRF       PORTC
;Manch_16f1825_rx.c,332 :: 		ANSELA  = 0;                                       //выключение АЦП
0x01EB	0x0023      	MOVLB      3
0x01EC	0x018C      	CLRF       ANSELA
;Manch_16f1825_rx.c,333 :: 		ANSELC  = 0;
0x01ED	0x018E      	CLRF       ANSELC
;Manch_16f1825_rx.c,334 :: 		CM1CON0=0;                                         //выключение компаратора
0x01EE	0x0022      	MOVLB      2
0x01EF	0x0191      	CLRF       CM1CON0
;Manch_16f1825_rx.c,335 :: 		CM2CON0=0;
0x01F0	0x0193      	CLRF       CM2CON0
;Manch_16f1825_rx.c,337 :: 		T6CON=0b11111111;                              //настройка TMR6.Прескалер 64,постскалер 16.
0x01F1	0x30FF      	MOVLW      255
0x01F2	0x0028      	MOVLB      8
0x01F3	0x009E      	MOVWF      T6CON
;Manch_16f1825_rx.c,338 :: 		PIE3.TMR6IE=1;                                 //разрешение прерываний от TMR6
0x01F4	0x0021      	MOVLB      1
0x01F5	0x1593      	BSF        PIE3, 3
;Manch_16f1825_rx.c,340 :: 		asm {clrwdt};                                    //сброс собаки
0x01F6	0x0064      	CLRWDT
;Manch_16f1825_rx.c,342 :: 		PWM1_Init(1500);                                 //частота ШИМ
0x01F7	0x0020      	MOVLB      0
0x01F8	0x141C      	BSF        T2CON, 0
0x01F9	0x149C      	BSF        T2CON, 1
0x01FA	0x30A6      	MOVLW      166
0x01FB	0x009B      	MOVWF      PR2
0x01FC	0x2117      	CALL       _PWM1_Init
;Manch_16f1825_rx.c,343 :: 		PWM1_Start();
0x01FD	0x211C      	CALL       _PWM1_Start
;Manch_16f1825_rx.c,344 :: 		PWM1_Set_Duty(0);
0x01FE	0x0020      	MOVLB      0
0x01FF	0x01C8      	CLRF       FARG_PWM1_Set_Duty_new_duty
0x0200	0x2124      	CALL       _PWM1_Set_Duty
;Manch_16f1825_rx.c,345 :: 		PWM2_Init(1500);
0x0201	0x0020      	MOVLB      0
0x0202	0x141C      	BSF        T2CON, 0
0x0203	0x149C      	BSF        T2CON, 1
0x0204	0x30A6      	MOVLW      166
0x0205	0x009B      	MOVWF      PR2
0x0206	0x2165      	CALL       _PWM2_Init
;Manch_16f1825_rx.c,346 :: 		PWM2_Start();
0x0207	0x216A      	CALL       _PWM2_Start
;Manch_16f1825_rx.c,347 :: 		PWM2_Set_Duty(0);
0x0208	0x0020      	MOVLB      0
0x0209	0x01C8      	CLRF       FARG_PWM2_Set_Duty_new_duty
0x020A	0x2172      	CALL       _PWM2_Set_Duty
;Manch_16f1825_rx.c,349 :: 		PWR_RECEIVER =1;                                // включить питание приемника
0x020B	0x0022      	MOVLB      2
0x020C	0x160E      	BSF        LATC, 4
;Manch_16f1825_rx.c,350 :: 		ManReceiveStart ();                             // старт приема данных
0x020D	0x21A7      	CALL       _ManReceiveStart
;Manch_16f1825_rx.c,351 :: 		timeOffDevice_counter = - 9000;                //таймер полного выключения 9000-10 мин
0x020E	0x30D8      	MOVLW      216
0x020F	0x00C2      	MOVWF      _timeOffDevice_counter
0x0210	0x30DC      	MOVLW      220
0x0211	0x00C3      	MOVWF      _timeOffDevice_counter+1
;Manch_16f1825_rx.c,353 :: 		while (1)
L_main41:
;Manch_16f1825_rx.c,357 :: 		unsigned char *pBuf = ManRcvDataCheck();                    //проверка наличия данных
0x0212	0x2159      	CALL       _ManRcvDataCheck
0x0213	0x0870      	MOVF       R0, 0
0x0214	0x00C6      	MOVWF      main_pBuf_L1
0x0215	0x0871      	MOVF       R1, 0
0x0216	0x00C7      	MOVWF      main_pBuf_L1+1
;Manch_16f1825_rx.c,358 :: 		asm {clrwdt};                                    //сброс собаки
0x0217	0x0064      	CLRWDT
;Manch_16f1825_rx.c,359 :: 		if (pBuf)                                                   //если указатель не нулевой, значит данные поступили
0x0218	0x0846      	MOVF       main_pBuf_L1, 0
0x0219	0x0447      	IORWF       main_pBuf_L1+1, 0
0x021A	0x1903      	BTFSC      STATUS, 2
0x021B	0x2A7F      	GOTO       L_main43
;Manch_16f1825_rx.c,361 :: 		timeOffDevice_counter = -9000;                        //обновляем таймер выключения
0x021C	0x30D8      	MOVLW      216
0x021D	0x00C2      	MOVWF      _timeOffDevice_counter
0x021E	0x30DC      	MOVLW      220
0x021F	0x00C3      	MOVWF      _timeOffDevice_counter+1
;Manch_16f1825_rx.c,362 :: 		codeButtons = *pBuf;                                //копируем первый байт буфера
0x0220	0x0846      	MOVF       main_pBuf_L1, 0
0x0221	0x0084      	MOVWF      FSR0
0x0222	0x0847      	MOVF       main_pBuf_L1+1, 0
0x0223	0x0085      	MOVWF      FSR0H
0x0224	0x0800      	MOVF       INDF0, 0
0x0225	0x00F1      	MOVWF      R1
0x0226	0x0871      	MOVF       R1, 0
0x0227	0x00C1      	MOVWF      _codeButtons
;Manch_16f1825_rx.c,363 :: 		*pBuf++;
0x0228	0x0AC6      	INCF       main_pBuf_L1, 1
0x0229	0x1903      	BTFSC      STATUS, 2
0x022A	0x0AC7      	INCF       main_pBuf_L1+1, 1
;Manch_16f1825_rx.c,364 :: 		speedLevel = *pBuf;
0x022B	0x0846      	MOVF       main_pBuf_L1, 0
0x022C	0x0084      	MOVWF      FSR0
0x022D	0x0847      	MOVF       main_pBuf_L1+1, 0
0x022E	0x0085      	MOVWF      FSR0H
0x022F	0x0800      	MOVF       INDF0, 0
0x0230	0x00C5      	MOVWF      _speedLevel
;Manch_16f1825_rx.c,366 :: 		if(codeButtons & (1<<0))                          //проверяем какая кнопка нажата
0x0231	0x1C71      	BTFSS      R1, 0
0x0232	0x2A41      	GOTO       L_main44
;Manch_16f1825_rx.c,368 :: 		if( ++timerStartForward_counter <5)  FORWARD(255); //если вперед,при старте ШИМ на 100
0x0233	0x0AC4      	INCF       _timerStartForward_counter, 1
0x0234	0x3005      	MOVLW      5
0x0235	0x0244      	SUBWF      _timerStartForward_counter, 0
0x0236	0x1803      	BTFSC      STATUS, 0
0x0237	0x2A3C      	GOTO       L_main45
0x0238	0x30FF      	MOVLW      255
0x0239	0x00C8      	MOVWF      FARG_PWM1_Set_Duty_new_duty
0x023A	0x2124      	CALL       _PWM1_Set_Duty
0x023B	0x2A40      	GOTO       L_main46
L_main45:
;Manch_16f1825_rx.c,370 :: 		FORWARD(speedLevel);                          //передаем в ШИМ значение скорости
0x023C	0x0020      	MOVLB      0
0x023D	0x0845      	MOVF       _speedLevel, 0
0x023E	0x00C8      	MOVWF      FARG_PWM1_Set_Duty_new_duty
0x023F	0x2124      	CALL       _PWM1_Set_Duty
L_main46:
;Manch_16f1825_rx.c,371 :: 		}
0x0240	0x2A45      	GOTO       L_main47
L_main44:
;Manch_16f1825_rx.c,374 :: 		timerStartForward_counter=0;
0x0241	0x0020      	MOVLB      0
0x0242	0x01C4      	CLRF       _timerStartForward_counter
;Manch_16f1825_rx.c,375 :: 		FORWARD(0);
0x0243	0x01C8      	CLRF       FARG_PWM1_Set_Duty_new_duty
0x0244	0x2124      	CALL       _PWM1_Set_Duty
;Manch_16f1825_rx.c,376 :: 		}
L_main47:
;Manch_16f1825_rx.c,378 :: 		if(codeButtons & (1<<1))                              //если назад,передаем в ШИМ значение скорости
0x0245	0x0020      	MOVLB      0
0x0246	0x1CC1      	BTFSS      _codeButtons, 1
0x0247	0x2A56      	GOTO       L_main48
;Manch_16f1825_rx.c,380 :: 		if(++ timerStartReverse_counter<5) REVERSE(255);
0x0248	0x0AC0      	INCF       _timerStartReverse_counter, 1
0x0249	0x3005      	MOVLW      5
0x024A	0x0240      	SUBWF      _timerStartReverse_counter, 0
0x024B	0x1803      	BTFSC      STATUS, 0
0x024C	0x2A51      	GOTO       L_main49
0x024D	0x30FF      	MOVLW      255
0x024E	0x00C8      	MOVWF      FARG_PWM2_Set_Duty_new_duty
0x024F	0x2172      	CALL       _PWM2_Set_Duty
0x0250	0x2A55      	GOTO       L_main50
L_main49:
;Manch_16f1825_rx.c,382 :: 		REVERSE (speedlevel);
0x0251	0x0020      	MOVLB      0
0x0252	0x0845      	MOVF       _speedLevel, 0
0x0253	0x00C8      	MOVWF      FARG_PWM2_Set_Duty_new_duty
0x0254	0x2172      	CALL       _PWM2_Set_Duty
L_main50:
;Manch_16f1825_rx.c,383 :: 		}
0x0255	0x2A5A      	GOTO       L_main51
L_main48:
;Manch_16f1825_rx.c,386 :: 		timerStartReverse_counter=0;
0x0256	0x0020      	MOVLB      0
0x0257	0x01C0      	CLRF       _timerStartReverse_counter
;Manch_16f1825_rx.c,387 :: 		REVERSE(0);
0x0258	0x01C8      	CLRF       FARG_PWM2_Set_Duty_new_duty
0x0259	0x2172      	CALL       _PWM2_Set_Duty
;Manch_16f1825_rx.c,388 :: 		}
L_main51:
;Manch_16f1825_rx.c,391 :: 		if(codeButtons & (1<<2)) LEFT =1;                    //в лево
0x025A	0x0020      	MOVLB      0
0x025B	0x1D41      	BTFSS      _codeButtons, 2
0x025C	0x2A60      	GOTO       L_main52
0x025D	0x0022      	MOVLB      2
0x025E	0x150E      	BSF        LATC, 2
0x025F	0x2A62      	GOTO       L_main53
L_main52:
0x0260	0x0022      	MOVLB      2
;Manch_16f1825_rx.c,392 :: 		else  LEFT=0;
0x0261	0x110E      	BCF        LATC, 2
L_main53:
;Manch_16f1825_rx.c,394 :: 		if(codeButtons & (1<<3)) RIGHT =1;                   //в право
0x0262	0x0020      	MOVLB      0
0x0263	0x1DC1      	BTFSS      _codeButtons, 3
0x0264	0x2A68      	GOTO       L_main54
0x0265	0x0022      	MOVLB      2
0x0266	0x148E      	BSF        LATC, 1
0x0267	0x2A6A      	GOTO       L_main55
L_main54:
0x0268	0x0022      	MOVLB      2
;Manch_16f1825_rx.c,395 :: 		else  RIGHT=0;
0x0269	0x108E      	BCF        LATC, 1
L_main55:
;Manch_16f1825_rx.c,397 :: 		if(codeButtons & (1<<4)) TRIGGER =1;                 //включаем свет
0x026A	0x0020      	MOVLB      0
0x026B	0x1E41      	BTFSS      _codeButtons, 4
0x026C	0x2A70      	GOTO       L_main56
0x026D	0x0022      	MOVLB      2
0x026E	0x140E      	BSF        LATC, 0
0x026F	0x2A75      	GOTO       L_main57
L_main56:
;Manch_16f1825_rx.c,399 :: 		if(codeButtons & (1<<5))
0x0270	0x0020      	MOVLB      0
0x0271	0x1EC1      	BTFSS      _codeButtons, 5
0x0272	0x2A75      	GOTO       L_main58
;Manch_16f1825_rx.c,400 :: 		TRIGGER=0;                                      //выключаем свет
0x0273	0x0022      	MOVLB      2
0x0274	0x100E      	BCF        LATC, 0
L_main58:
;Manch_16f1825_rx.c,401 :: 		}
L_main57:
;Manch_16f1825_rx.c,404 :: 		ManBuffer[1]=0;                                     // обнуляем первый байт буфера данных
0x0275	0x0020      	MOVLB      0
0x0276	0x01A8      	CLRF       _ManBuffer+1
;Manch_16f1825_rx.c,405 :: 		ManBuffer[2]=0;                                     // обнуляем второй байт буфера данных
0x0277	0x01A9      	CLRF       _ManBuffer+2
;Manch_16f1825_rx.c,406 :: 		codeButtons=0;                                      // обнуляем переменную кнопок
0x0278	0x01C1      	CLRF       _codeButtons
;Manch_16f1825_rx.c,407 :: 		speedLevel=0;                                      // обнуляем переменную скорости
0x0279	0x01C5      	CLRF       _speedLevel
;Manch_16f1825_rx.c,409 :: 		timeOffOut_counter = -3;                          //запуск таймера выключения выходов 2-160мс,3-240мсек.
0x027A	0x30FD      	MOVLW      253
0x027B	0x00B8      	MOVWF      _timeOffOut_counter
0x027C	0x30FF      	MOVLW      255
0x027D	0x00B9      	MOVWF      _timeOffOut_counter+1
;Manch_16f1825_rx.c,411 :: 		ManReceiveStart ();                                //перезапуск процесса чтения MANCHESTER данных
0x027E	0x21A7      	CALL       _ManReceiveStart
;Manch_16f1825_rx.c,414 :: 		}
L_main43:
;Manch_16f1825_rx.c,417 :: 		asm {clrwdt};                                    //сброс собаки
0x027F	0x0064      	CLRWDT
;Manch_16f1825_rx.c,419 :: 		if(timeOffOut_counter>=0)                       //таймер отсчитал
0x0280	0x3080      	MOVLW      128
0x0281	0x0639      	XORWF      _timeOffOut_counter+1, 0
0x0282	0x00F0      	MOVWF      R0
0x0283	0x3080      	MOVLW      128
0x0284	0x0270      	SUBWF      R0, 0
0x0285	0x1D03      	BTFSS      STATUS, 2
0x0286	0x2A89      	GOTO       L__main74
0x0287	0x3000      	MOVLW      0
0x0288	0x0238      	SUBWF      _timeOffOut_counter, 0
L__main74:
0x0289	0x1C03      	BTFSS      STATUS, 0
0x028A	0x2A93      	GOTO       L_main59
;Manch_16f1825_rx.c,421 :: 		FORWARD(0);                              //выключаем выходы
0x028B	0x01C8      	CLRF       FARG_PWM1_Set_Duty_new_duty
0x028C	0x2124      	CALL       _PWM1_Set_Duty
;Manch_16f1825_rx.c,422 :: 		REVERSE(0);
0x028D	0x0020      	MOVLB      0
0x028E	0x01C8      	CLRF       FARG_PWM2_Set_Duty_new_duty
0x028F	0x2172      	CALL       _PWM2_Set_Duty
;Manch_16f1825_rx.c,423 :: 		LEFT=0;
0x0290	0x0022      	MOVLB      2
0x0291	0x110E      	BCF        LATC, 2
;Manch_16f1825_rx.c,424 :: 		RIGHT=0;
0x0292	0x108E      	BCF        LATC, 1
;Manch_16f1825_rx.c,426 :: 		}
L_main59:
;Manch_16f1825_rx.c,427 :: 		if(timeOffDevice_counter >=0 )
0x0293	0x3080      	MOVLW      128
0x0294	0x0020      	MOVLB      0
0x0295	0x0643      	XORWF      _timeOffDevice_counter+1, 0
0x0296	0x00F0      	MOVWF      R0
0x0297	0x3080      	MOVLW      128
0x0298	0x0270      	SUBWF      R0, 0
0x0299	0x1D03      	BTFSS      STATUS, 2
0x029A	0x2A9D      	GOTO       L__main75
0x029B	0x3000      	MOVLW      0
0x029C	0x0242      	SUBWF      _timeOffDevice_counter, 0
L__main75:
0x029D	0x1C03      	BTFSS      STATUS, 0
0x029E	0x2AAC      	GOTO       L_main60
;Manch_16f1825_rx.c,429 :: 		TRIGGER=0;                                //выключаем свет
0x029F	0x0022      	MOVLB      2
0x02A0	0x100E      	BCF        LATC, 0
;Manch_16f1825_rx.c,430 :: 		FORWARD(0);                              //выключаем выходы
0x02A1	0x0020      	MOVLB      0
0x02A2	0x01C8      	CLRF       FARG_PWM1_Set_Duty_new_duty
0x02A3	0x2124      	CALL       _PWM1_Set_Duty
;Manch_16f1825_rx.c,431 :: 		REVERSE(0);
0x02A4	0x0020      	MOVLB      0
0x02A5	0x01C8      	CLRF       FARG_PWM2_Set_Duty_new_duty
0x02A6	0x2172      	CALL       _PWM2_Set_Duty
;Manch_16f1825_rx.c,432 :: 		LEFT=0;
0x02A7	0x0022      	MOVLB      2
0x02A8	0x110E      	BCF        LATC, 2
;Manch_16f1825_rx.c,433 :: 		RIGHT=0;
0x02A9	0x108E      	BCF        LATC, 1
;Manch_16f1825_rx.c,434 :: 		PWR_RECEIVER =0;                         //выключить питание приемника
0x02AA	0x120E      	BCF        LATC, 4
;Manch_16f1825_rx.c,435 :: 		asm {sleep};                            //всем спать ))
0x02AB	0x0063      	SLEEP
;Manch_16f1825_rx.c,436 :: 		}
L_main60:
;Manch_16f1825_rx.c,438 :: 		}
0x02AC	0x2A12      	GOTO       L_main41
;Manch_16f1825_rx.c,443 :: 		}
L_end_main:
0x02AD	0x2AAD      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004     [224]    _interrupt
0x00E4      [42]    _Mul_16x16_U
0x010E       [9]    ___CC2DW
0x0117       [5]    _PWM1_Init
0x011C       [8]    _PWM1_Start
0x0124      [53]    _PWM1_Set_Duty
0x0159      [12]    _ManRcvDataCheck
0x0165       [5]    _PWM2_Init
0x016A       [8]    _PWM2_Start
0x0172      [53]    _PWM2_Set_Duty
0x01A7      [17]    _ManReceiveStart
0x01B8       [5]    _ManReceiveStop
0x01BD      [29]    _CheckSumm
0x01DA     [212]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF0
0x0001       [1]    INDF1
0x0003       [1]    STATUS
0x0004       [1]    FSR0L
0x0005       [1]    FSR0H
0x0006       [1]    FSR1L
0x0007       [1]    FSR1H
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PORTA
0x000E       [1]    PORTC
0x0013       [1]    PIR3
0x0015       [1]    TMR0
0x001B       [1]    PR2
0x001C       [1]    T2CON
0x0023       [3]    _ManIdentifier
0x0026       [1]    _Invert
0x0027      [16]    _ManBuffer
0x0037       [1]    _TimerVal
0x0038       [2]    _timeOffOut_counter
0x003A       [1]    _CheckSummByte
0x003B       [1]    _ByteIn
0x003C       [1]    _BitCounter
0x003D       [1]    _DataLength
0x003E       [1]    _ByteCounter
0x003F       [1]    _ManFlags
0x0040       [1]    _timerStartReverse_counter
0x0041       [1]    _codeButtons
0x0042       [2]    _timeOffDevice_counter
0x0044       [1]    _timerStartForward_counter
0x0045       [1]    _speedLevel
0x0046       [2]    main_pBuf_L1
0x0048       [1]    FARG_PWM2_Set_Duty_new_duty
0x0048       [4]    FARG_PWM2_Init_PWM_Freq
0x0048       [4]    FARG_PWM1_Init_PWM_Freq
0x0048       [1]    FARG_PWM1_Set_Duty_new_duty
0x004C       [1]    FARG_CheckSumm_dataa
0x004D       [1]    CheckSumm_i_L0
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x008C       [1]    TRISA
0x008E       [0]    TRISC5_bit
0x008E       [0]    TRISC3_bit
0x008E       [1]    TRISC
0x0093       [1]    PIE3
0x0095       [1]    OPTION_REG
0x0099       [1]    OSCCON
0x010E       [1]    LATC
0x0111       [1]    CM1CON0
0x0113       [1]    CM2CON0
0x018C       [1]    ANSELA
0x018E       [1]    ANSELC
0x0291       [1]    CCPR1L
0x0293       [1]    CCP1CON
0x0298       [1]    CCPR2L
0x029A       [1]    CCP2CON
0x0391       [1]    IOCAP
0x0392       [1]    IOCAN
0x0393       [1]    IOCAF
0x041E       [1]    T6CON
//** Label List: ** 
//----------------------------------------------
  L_ManRcvDataCheck0
  L_interrupt1
  L_interrupt2
  L_interrupt3
  L_interrupt4
  L_interrupt5
  L_interrupt6
  L_interrupt7
  L_interrupt8
  L_interrupt9
  L_interrupt10
  L_interrupt11
  L_interrupt12
  L_interrupt13
  L_interrupt14
  L_interrupt15
  L_interrupt16
  L_interrupt17
  L_interrupt18
  ___interrupt_Ini
  L_interrupt19
  L_interrupt20
  L_interrupt21
  L_interrupt22
  L_interrupt23
  L_interrupt24
  L_interrupt25
  L_interrupt26
  L_interrupt27
  L_interrupt28
  L_interrupt29
  L_interrupt30
  L_interrupt31
  L_interrupt32
  L_interrupt33
  L_interrupt34
  L_interrupt35
  L_CheckSumm36
  L_CheckSumm37
  L_CheckSumm38
  L_CheckSumm39
  L_CheckSumm40
  L_main41
  L_main42
  L_main43
  L_main44
  L_main45
  L_main46
  L_main47
  L_main48
  L_main49
  L_main50
  L_main51
  L_main52
  L_main53
  L_main54
  L_main55
  L_main56
  L_main57
  L_main58
  L_main59
  L_main60
  L__interrupt61
  L__interrupt62
  L__interrupt63
  L__interrupt64
  L_end_ManReceiveStart
  _ManReceiveStart
  L_end_ManReceiveStop
  _ManReceiveStop
  L_end_ManRcvDataCheck
  _ManRcvDataCheck
  L_end_interrupt
  _interrupt
  L__interrupt69
  L__interrupt70
  L__interrupt71
  L_end_CheckSumm
  _CheckSumm
  L_end_main
  _main
  L__main74
  L__main75
  L_Div_16x16_S0
  L_Div_16x16_S1
  LOOPS3232A
  SADD22LA
  SOK22LA
  SADD22L8
  SOK22L8
  LOOPS3232B
  SADD22LB
  SOK22LB
  SADD22L16
  SOK22L16
  LOOPS3232C
  SADD22LC
  SOK22LC
  SADD22L24
  SOK22L24
  LOOPS3232D
  SADD22LD
  SOK22LD
  SOK22L
  L_Div_32x32_S6
  L_Div_32x32_S7
  L_Div_32x32_S8
  L_Div_32x32_S9
  FXD3232S
  END_ALL
  CA3232S
  C3232SX
  C3232SX1
  C3232S
  C3232S2
  C3232SX4
  C3232SOK
  C3232SX3
  C3232SX2
  avoid_comfrem
  LOOPU3232A
  UADD22LA
  UOK22LA
  UADD22L8
  UOK22L8
  LOOPU3232B
  UADD22LB
  UOK22LB
  UADD22L16
  UOK22L16
  LOOPU3232C
  UADD22LC
  UOK22LC
  UADD22L24
  UOK22L24
  LOOPU3232D
  UADD22LD
  UOK22LD
  UOK22L
  _NEXT
  _EXIT2
  _LOOP
  _EXIT1
  _IF_FIRST
  _IF_SECOND
  _INVERCE_FIRST
  _MULT
  _INBERSE_SECOND
  _EXIT
  L_end_Mul_8x8_U
  _Mul_8x8_U
  L_end_Mul_16x16_U
  _Mul_16x16_U
  L_end_Div_8x8_U
  _Div_8x8_U
  L_end_Div_16x16_U
  _Div_16x16_U
  L_end_Mul_8x8_S
  _Mul_8x8_S
  L_end_Mul_16x16_S
  _Mul_16x16_S
  L_end_Div_16x16_S_L
  _Div_16x16_S_L
  L_end_Div_16x16_S
  _Div_16x16_S
  L_end_Div_8x8_S
  _Div_8x8_S
  L_end_SDIV3232L
  _SDIV3232L
  L_end_COMFREM
  _COMFREM
  L_end_Div_32x32_S
  _Div_32x32_S
  L_end_Div_32x32_U
  _Div_32x32_U
  L_end_Mul_32x32_U
  _Mul_32x32_U
  L_end_Mul_32x32_S
  _Mul_32x32_S
  L_end_PWM1_Init
  _PWM1_Init
  L_end_PWM1_Set_Duty
  _PWM1_Set_Duty
  L__PWM1_Set_Duty2
  L__PWM1_Set_Duty3
  L__PWM1_Set_Duty4
  L__PWM1_Set_Duty5
  L_end_PWM1_Start
  _PWM1_Start
  L_end_PWM1_Stop
  _PWM1_Stop
  L_end_PWM2_Init
  _PWM2_Init
  L_end_PWM2_Set_Duty
  _PWM2_Set_Duty
  L__PWM2_Set_Duty10
  L__PWM2_Set_Duty11
  L__PWM2_Set_Duty12
  L__PWM2_Set_Duty13
  L_end_PWM2_Start
  _PWM2_Start
  L_end_PWM2_Stop
  _PWM2_Stop
  L_end_PWM3_Init
  _PWM3_Init
  L_end_PWM3_Set_Duty
  _PWM3_Set_Duty
  L__PWM3_Set_Duty18
  L__PWM3_Set_Duty19
  L__PWM3_Set_Duty20
  L__PWM3_Set_Duty21
  L_end_PWM3_Start
  _PWM3_Start
  L_end_PWM3_Stop
  _PWM3_Stop
  L_end_PWM4_Init
  _PWM4_Init
  L_end_PWM4_Set_Duty
  _PWM4_Set_Duty
  L__PWM4_Set_Duty26
  L__PWM4_Set_Duty27
  L__PWM4_Set_Duty28
  L__PWM4_Set_Duty29
  L_end_PWM4_Start
  _PWM4_Start
  L_end_PWM4_Stop
  _PWM4_Stop
  L_CA2A_Loop
  L_CA2AW_Loop
  L_CS2S_Loop
  L_CS2S_End
  L_FZinS_Loop
  L_FZinS_End
  _CC2D_Loop1
  _CC2DL_Loop1
  L_end_____DoIFC
  _____DoIFC
  L_end___CA2A
  ___CA2A
  L_end___CA2AW
  ___CA2AW
  L_end___CS2S
  ___CS2S
  L_end___FZinS
  ___FZinS
  L_end___CC2D
  ___CC2D
  L_end___CC2DW
  ___CC2DW
  L_end_Swap
  _Swap
  L_ManRcvDataCheck0
  L_interrupt1
  L_interrupt2
  L_interrupt3
  L_interrupt4
  L_interrupt5
  L_interrupt6
  L_interrupt7
  L_interrupt8
  L_interrupt9
  L_interrupt10
  L_interrupt11
  L_interrupt12
  L_interrupt13
  L_interrupt14
  L_interrupt15
  L_interrupt16
  L_interrupt17
  L_interrupt18
  ___interrupt_Ini
  L_interrupt19
  L_interrupt20
  L_interrupt21
  L_interrupt22
  L_interrupt23
  L_interrupt24
  L_interrupt25
  L_interrupt26
  L_interrupt27
  L_interrupt28
  L_interrupt29
  L_interrupt30
  L_interrupt31
  L_interrupt32
  L_interrupt33
  L_interrupt34
  L_interrupt35
  L_CheckSumm36
  L_CheckSumm37
  L_CheckSumm38
  L_CheckSumm39
  L_CheckSumm40
  L_main41
  L_main42
  L_main43
  L_main44
  L_main45
  L_main46
  L_main47
  L_main48
  L_main49
  L_main50
  L_main51
  L_main52
  L_main53
  L_main54
  L_main55
  L_main56
  L_main57
  L_main58
  L_main59
  L_main60
  L__interrupt61
  L__interrupt62
  L__interrupt63
  L__interrupt64
  L_end_ManReceiveStart
  _ManReceiveStart
  L_end_ManReceiveStop
  _ManReceiveStop
  L_end_ManRcvDataCheck
  _ManRcvDataCheck
  L_end_interrupt
  _interrupt
  L__interrupt69
  L__interrupt70
  L__interrupt71
  L_end_CheckSumm
  _CheckSumm
  L_end_main
  _main
  L__main74
  L__main75
